#include "Library Demo Methods\\Hamilton Tilt Clamp Module Demo.res"
global device ML_STAR ("Library Demo Methods\\Hamilton Tilt Clamp Module Demo.lay", "ML_STAR", hslTrue);
 namespace _Method { #include "HslHamHeaterShakerLib.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable HHS1;
variable HHS2;
timer timer1;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{{ 1 1 0 "b8d2f572_f0c4_46ba_b840731f76e57ccb" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::CreateUsbDevice(1, HHS1);
// }} ""
// {{{ 2 1 0 "7911a98d_123a_43d8_a729d0ab16115883" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::CreateUsbDevice(2, HHS2);
// }} ""
// {{{ 3 1 0 "2641614a_5d1f_4793_9738a86ff5a48768" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartShaker(HHS1, 200);
// }} ""
// {{{ 4 1 0 "45596460_c20f_4a5a_b7dd10e95948ee3f" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartShaker(HHS2, 200);
// }} ""
// {{ 5 1 0 "d5d63f9b_ebeb_459e_888a0a3099171fc2" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.SetTimer(30) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 6 1 0 "ec920659_8a16_409b_878dfd8bafa3c35e" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == timer1.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 7 1 0 "973a55c9_cb2c_4719_ab07bd804bc8e065" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopShaker(HHS1);
// }} ""
// {{{ 8 1 0 "0493df7e_6cfb_43d0_ad124bf6ae6dc040" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopShaker(HHS2);
// }} ""
// {{{ 9 1 0 "0ae77bf4_b1ad_4f94_b0809abfa18a07d7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::Terminate();
// }} ""
// {{ 2 "AutoExitBlock" ""
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2023-12-19 14:55$$checksum=596b75dd$$length=087$$