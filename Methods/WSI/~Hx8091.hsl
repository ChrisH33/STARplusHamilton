 namespace _Method { #include "HSLML_STARLib.hsl" }
 namespace _Method { #include "WSI\\AswStatusDialog_WSI.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "WSI\\SangerGeneral.hs_" } 
 namespace _Method { #include "HSLFileDirectoryLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLUtilLib2.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "Unique_members.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Array.hsl" } 
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "HSLDevLib.hsl" } 
 namespace _Method { #include "MLSTARLiquidClassLib.hsl" } 
 namespace _Method { #include "HSLDeckVisualize.hsl" } 
 namespace _Method { #include "WSI\\TraceArray.hs_" } 
 namespace _Method { #include "WSI\\SCAP_STARplus.hs_" } 
 namespace _Method { #include "WSI\\UV_STARplus.hs_" } 
 namespace _Method { #include "ParallelProcessHandling.hs_" } 
 namespace _Method { #include "WSI\\JSONSearch.hs_" } 
 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
 namespace _Method { #include "WSI\\HSLGetSerialNumber_WSI.hsl" } 
 namespace _Method { #include "Labware Properties\\Labware_Property_Query.hs_" } 
 namespace _Method { #include "load_instructions.hs_" } 
 namespace _Method { #include "EmailUtilities\\HSLEmailUtilLib.hsl" } 
 namespace _Method { #include "Well_Format.hs_" } 
 namespace _Method { #include "lookup.hs_" } 
 namespace _Method { #include "DataManager\\DataManagerInterface.hs_" } 
 namespace _Method { #include "HSLExtensions\\Sequence.hsl" } 
 namespace _Method { #include "HSLLabwareStateLib.hsl" } 
 namespace _Method { #include "HSLTipCountingLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\String.hsl" } 
 namespace _Method { #include "SmartStepCustomizedErrorHandling\\SmartStepCustomErrorHandling.hs_" } 
 namespace _Method { #include "Artel\\Library\\Data_Controller_GlobalVariables.hsl" } 
 namespace _Method { #include "VirtualLabware_V2.hsl" } 
 namespace _Method { #include "HSLLabwrAccess\\HSLLabwrAccess.hsl" } 
 namespace _Method { #include "ForkandJoin Library\\HSL_ForkJoin.hsl" } 
 namespace _Method { #include "HSLBarcodeReader.hsl" } 
#include "STARplus_Deck.res"
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable strActiveRequestFolderPath;
variable blnSimMode;
variable strPendingSimFolderPath;
variable arrWorklist_SourceBarcodes_Unique[];
variable arrWorklist_DestinationBarcodes_Unique[];
variable blnTipReload;
variable strProcessType;
variable intLast1000ulCOREChannel;
variable intSourceWellVolume;
variable strLC_4mL;
variable strCurrentRunFolderPath;
variable intNumberOfSourcePlates;
variable strSourceLabwareID;
sequence seqPipetting_TiltStation;
sequence seqTransport_Loading_Dest;
sequence seqTransport_TempStorage;
sequence seqTransport_Loading_Src;
sequence seqTransport_TiltStation;
sequence seqTransport_Active_Src;
variable intNumberOfDestinationPlates;
sequence seqTransport_LidPark;
variable intMaxSourcePlateNumber;
variable intMaxDestinationPlateNumber;
sequence seqTransport_LidTilt;
variable arrDestinationBarcodes_Deck[];
variable arrSourceBarcodes_Deck[];
variable arrWorklist_SourceBarcodes[];
variable intDestinationWellVolume;
variable intWorklistLineCount;
variable arrWorklist_SourceWellIDs[];
sequence seqTransport_Active_Dest;
variable arrWorklist_DestinationBarcodes[];
variable arrWorklist_DestinationWellIDs[];
sequence seqTransport_HHS;
variable lpCount;
variable intCurrentRunNumber;
variable lpBreak;
variable blnCustomDriven;
variable blnAdmin; // Pulled from the DB. Generated by IdentifyCurrentUser in A_MethodInit
variable frkHandle; // handle for the deck movement associated with the UV light cleaning
timer tmrUVLight; // Timer associated with how long the UV lights have been active
variable strImagePath;
variable strImageFilePath;
variable strImageFolderPath;
variable strUsersPreferredName;
global device ML_STAR ("STARplus_Deck.lay", "ML_STAR", hslTrue);
variable blnTesting;
variable blnFirstTrigger;
sequence seqBarcode;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
SANGERGENERAL::_InitLibrary();
UNIQUE_MEMBERS::_InitLibrary();
TRACEARRAY::_InitLibrary();
SCAP_STARPLUS::_InitLibrary();
UV_STARPLUS::_InitLibrary();
PARALLELPROCESSHANDLING::_InitLibrary();
JSONSEARCH::_InitLibrary();
LPQ::_InitLibrary();
LOAD_INSTRUCTIONS::_InitLibrary();
WELL_FORMAT::_InitLibrary();
LOOKUP::_InitLibrary();
DATAMANAGERINTERFACE::_InitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "313d3104_97cc_4910_9101c487987171b9" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("*******************************************************************************************************************************************\n                                                            Method Details\n*******************************************************************************************************************************************\nMethod:                                            Cell Culturing for the MAVE_SGE project\nVersion:                                            1.0\nDescription:                                      Check SOPs \nSoftware:                                         Venus 4 (v 4.5.0.7977)\nAuthor:                                             Chris Henderson\nProcess Flow:                                  \n****************************************************************************************************************************************** "));
// }} ""
// {{ 2 1 0 "63a220da_97d7_4edb_b9c5d9ce4881100d" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 3 1 0 "da1bf9f2_3e91_4928_9167473094c372de" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
A_MethodInit(TRACE_LEVEL_RELEASE);
// }} ""
// {{{ 4 1 0 "f4cc0486_2c9f_4719_8fcfb290ebdde2fe" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
B_TestingFileGeneration();
// }} ""
// {{ 5 1 0 "20d2a5ec_d3a0_4fe6_9eafcce3424544b2" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
lpCount = 0;
while (1 == 1)
{
lpCount = lpCount + 1;
// }} ""
// {{{ 6 1 0 "cfff4605_2229_402b_8b3194cdeebc137b" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
lpBreak = C_FindPendingRequest();
// }} ""
// {{ 7 1 0 "9eae9467_4df6_4c6d_a90413ca38675391" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (lpBreak == 1)
{
// }} ""
// {{ 8 1 0 "8a15ab22_c509_4efc_97f2ca006f29f8f2" "{B31F3533-5D80-11d4-A5EB-0050DA737D89}"
break;
// }} ""
// {{ 9 1 0 "9eae9467_4df6_4c6d_a90413ca38675391" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 10 1 0 "0f01d625_375a_45b0_a1a039f59f6de8db" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
D_SequenceCreation();
// }} ""
// {{{ 11 1 0 "da16603b_a86c_414a_affab86f86a23357" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
E_LoadInstructions();
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 12 1 0 "b18ca953_7abb_4d6b_8abf7e2d1d3d260a" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (blnSimMode == 0)
{
// }} ""
// {{{ 13 1 0 "b41d49c1_1f5a_4293_923c9e71eb82f204" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
PARALLELPROCESSHANDLING::WaitForOne(frkHandle);
// }} ""
// {{ 14 1 0 "b18ca953_7abb_4d6b_8abf7e2d1d3d260a" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{{ 15 1 0 "2ec6e174_9933_41f2_b44534dd37d015e6" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
G_PipettingSteps();
// }} ""
// {{ 16 1 0 "dbab73aa_9e1f_47bb_8b786f64f6e56b60" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{{ 17 1 0 "e9bb2eef_1fd4_477e_a10be8bfc79cdde9" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
H_MethodEnd();
// }} ""
// {{ 18 1 0 "20d2a5ec_d3a0_4fe6_9eafcce3424544b2" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{{ 19 1 0 "b0f0ad01_d997_439d_921746133e7f3973" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStatusDialog::Terminate();
// }} ""
// {{{ 20 1 0 "1406f710_a8a6_4647_a16310eb27f40bc0" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SCAP_STARPLUS::Disconnect();
// }} ""
// {{ 21 1 0 "5d92cc20_47fe_4fba_acadbb9cd5b7368c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("############## Method Complete Successfully #################"));
// }} ""
// {{ 2 "AutoExitBlock" ""
SANGERGENERAL::_ExitLibrary();
UNIQUE_MEMBERS::_ExitLibrary();
TRACEARRAY::_ExitLibrary();
SCAP_STARPLUS::_ExitLibrary();
UV_STARPLUS::_ExitLibrary();
PARALLELPROCESSHANDLING::_ExitLibrary();
JSONSEARCH::_ExitLibrary();
LPQ::_ExitLibrary();
LOAD_INSTRUCTIONS::_ExitLibrary();
WELL_FORMAT::_ExitLibrary();
LOOKUP::_ExitLibrary();
DATAMANAGERINTERFACE::_ExitLibrary();
SMARTSTEPCUSTOMERRORHANDLING::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2024-01-24 17:21$$checksum=22e92585$$length=087$$