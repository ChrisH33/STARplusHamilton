 namespace _Method { #include "HSLML_STARLib.hsl" }
 namespace _Method { #include "WSI\\AswStatusDialog_WSI.hsl" } 
 namespace _Method { #include "HSLStrLib.hsl" } 
 namespace _Method { #include "WSI\\SangerGeneral.hs_" } 
 namespace _Method { #include "HSLFileDirectoryLib.hsl" } 
 namespace _Method { #include "HSLFilLib.hsl" } 
 namespace _Method { #include "HSLUtilLib2.hsl" } 
 namespace _Method { #include "HSLTimLib.hsl" } 
 namespace _Method { #include "Unique_members.hs_" } 
 namespace _Method { #include "HSLSeqLib.hsl" } 
 namespace _Method { #include "HSLExtensions\\Array.hsl" } 
 namespace _Method { #include "HSLDevLib.hsl" } 
 namespace _Method { #include "MLSTARLiquidClassLib.hsl" } 
 namespace _Method { #include "HSLDeckVisualize.hsl" } 
 namespace _Method { #include "WSI\\TraceArray.hs_" } 
 namespace _Method { #include "WSI\\SCAP_STARplus.hs_" } 
 namespace _Method { #include "WSI\\UV_STARplus.hs_" } 
 namespace _Method { #include "WSI\\JSONSearch.hs_" } 
 namespace _Method { #include "ASWStandardDialogs\\ASWStandardDialogs.hsl" } 
 namespace _Method { #include "ASWStandard\\TraceLevel\\TraceLevel.hsl" } 
 namespace _Method { #include "WSI\\HSLGetSerialNumber_WSI.hsl" } 
 namespace _Method { #include "load_instructions.hs_" } 
 namespace _Method { #include "lookup.hs_" } 
 namespace _Method { #include "WSI\\SangerBarcoding\\HSLBarcodeReader_WSI.hsl" } 
 namespace _Method { #include "Hamilton Tilt Clamp Module\\Hamilton Tilt Clamp Module.hsl" } 
 namespace _Method { #include "VirtualLabware_V2.hsl" } 
#include "wsi\\STARplus_Deck.res"
 namespace _Method { #include "HSLMthLib.hsl" } 
 namespace _Method { #include "ParallelProcessHandling.hs_" } 
 namespace _Method { #include "DataManager\\DataManagerInterface.hs_" } 
 namespace _Method { #include "HSLExtensions\\Array2D.hsl" } 
/* {{ 2 "LibraryInsertLine" "" */ // }} ""
variable blnSimMode;
variable strPendingSimFolderPath;
variable arrWorklist_SourceBarcodes_Unique[];
variable arrWorklist_DestinationBarcodes_Unique[];
variable blnTipReload;
variable strProcessType;
variable strCurrentRunFolderPath;
variable intNumberOfSourcePlates;
variable intNumberOfDestinationPlates;
variable intMaxSourcePlateNumber;
variable intMaxDestinationPlateNumber;
variable arrWorklist_SourceBarcodes[];
variable intWorklistLineCount;
variable arrWorklist_SourceWellIDs[];
variable arrWorklist_DestinationBarcodes[];
variable arrWorklist_DestinationWellIDs[];
sequence seqTransport_HHS;
variable lpCount;
variable intCurrentRunNumber;
variable lpBreak;
variable blnAdmin; // Pulled from the DB. Generated by IdentifyCurrentUser in A_MethodInit
variable frkHandle; // handle for the deck movement associated with the UV light cleaning
timer tmrUVLight; // Timer associated with how long the UV lights have been active
variable strImagePath;
variable strImageFilePath;
variable strImageFolderPath;
variable strUsersPreferredName;
global device ML_STAR ("wsi\\STARplus_Deck.lay", "ML_STAR", hslTrue);
variable blnTesting;
variable arrInWorklistBarcodes[];
variable arrScannedBarcodes[];
variable intTiltModuleID_1;
variable intTiltModuleID_2;
variable intNumberOfActiveRequestFiles;
variable blnReturn;
variable strMethodFolderPath;
variable blnDirectoryExists;
variable arrWorkflow[];
variable strActiveRequestFolderPath;
variable devTilt_1;
variable devTilt_2;
variable lpCounter1;
variable strWorklistSourceLabware;
sequence seqTransport_Stacked;
sequence seqPipetting;
sequence seqTransport_Active;
sequence seqTransport_Tilt;
sequence seqTransport_Loading;
sequence arrAllSequences[];
variable intNumberOfLabwareVariants;
variable arrLabwareVariants[];
variable arrNumberOfVariants[];
dialog customDialogEADADE7DEC1B4fa5955C33C0BAC32C9B;
variable strMethodName;
/* {{ 2 "VariableInsertLine" "" */ // }} ""
// {{ 2 "TemplateIncludeBlock" ""
 namespace _Method { #include "HSLMETEDLib.hs_" } 
 namespace _Method { #include "HSLMECCLib.hs_" } 
 namespace _Method { #include "HSLPTLLib.hsl" } 
 namespace _Method { #include "HSLSTCCLib.hs_" } 
// }} ""
// {{{ 2 "LocalSubmethodInclude" ""
 namespace _Method {  #include __filename__ ".sub"  } 
// }} ""
/* {{ 2 "ProcessInsertLine" "" */ // }} ""
// {{{ 5 "main" "Begin"
namespace _Method { method main(  ) void {
// }} ""
private variable arrActiveRequestFilePaths[];
// {{ 5 "main" "InitLocals"
// }} ""
// {{ 2 "AutoInitBlock" ""
PTL::SetWashingStateDefault("RinseTime1", 5);
PTL::SetWashingStateDefault("SoakTime1", 5);
PTL::SetWashingStateDefault("FlowRate1", 11);
PTL::SetWashingStateDefault("RinseTime2", 0);
PTL::SetWashingStateDefault("SoakTime2", 0);
PTL::SetWashingStateDefault("FlowRate2", 11);
PTL::SetWashingStateDefault("DrainingTime", 10);
PTL::SetWashingStateDefault("StartWashLiquid", 0);
PTL::SetLoadingStateDefault("RecoveryOptionContinue", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionExclude", hslTrue);
PTL::SetLoadingStateDefault("RecoveryOptionDefault", 0);
PTL::SetLoadingStateDefault("KitLotCheckEnabled", hslFalse);
SANGERGENERAL::_InitLibrary();
UNIQUE_MEMBERS::_InitLibrary();
TRACEARRAY::_InitLibrary();
SCAP_STARPLUS::_InitLibrary();
UV_STARPLUS::_InitLibrary();
JSONSEARCH::_InitLibrary();
LOAD_INSTRUCTIONS::_InitLibrary();
LOOKUP::_InitLibrary();
PARALLELPROCESSHANDLING::_InitLibrary();
DATAMANAGERINTERFACE::_InitLibrary();
::RegisterAbortHandler( "OnAbort");
// }} ""
// {{ 1 1 0 "313d3104_97cc_4910_9101c487987171b9" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("*******************************************************************************************************************************************\n                                                            Method Details\n*******************************************************************************************************************************************\nMethod:                                            Cell Culturing for the MAVE_SGE project\nVersion:                                            1.0\nDescription:                                      Check SOPs \nSoftware:                                         Venus 4 (v 4.5.0.7977)\nAuthor:                                             Chris Henderson\nProcess Flow:                                  \n****************************************************************************************************************************************** "));
// }} ""
// {{ 2 1 0 "63a220da_97d7_4edb_b9c5d9ce4881100d" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 3 1 0 "c42b667e_1d13_47fd_928d848b2cd74aac" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
A_MethodInit(TRACE_LEVEL_RELEASE);
// }} ""
// {{ 4 1 0 "6316ef3a_d14e_41d2_bdd6dfeccf18e1be" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 5 1 0 "bd1866ba_c269_47df_b1a24ddcad707436" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 6 1 0 "b928c5e1_a78a_4835_9e324eb60249515a" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
arrActiveRequestFilePaths.SetSize(0);
// }} ""
// {{ 7 1 0 "66bc8a47_cee9_441a_a681109945deac3b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 8 1 0 "b5dd4a69_f2b2_4828_9115d13b02d319b1" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
strMethodFolderPath = GetMethodFolder(0);
// }} ""
// {{{ 9 1 0 "cf5ca2b0_051a_4c8a_82cf3ce1e1cb02f1" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
strActiveRequestFolderPath = StrConcat2(strMethodFolderPath, Translate("Request Files\\"));
// }} ""
// {{{ 10 1 0 "73164396_7bbc_4fc7_9824b724925986c0" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
blnDirectoryExists = FileDirectoryLib::CheckIfDirectoryExists(strActiveRequestFolderPath);
// }} ""
// {{{ 11 1 0 "9d661728_4fc7_4d1a_819d7b48e76401d7" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::Trace_02(TRACE_LEVEL_DEBUG, Translate("///// strActiveRequestFolderPath = "), strActiveRequestFolderPath);
// }} ""
// {{ 12 1 0 "8c212756_ec0e_4869_bce40fdf8ab1efbc" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (blnDirectoryExists == 0)
{
// }} ""
// {{{ 13 1 0 "021388c8_c29d_40fa_9c827ec6f706de98" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
FileDirectoryLib::CreateDirectory(strActiveRequestFolderPath);
// }} ""
// {{ 14 1 0 "8c212756_ec0e_4869_bce40fdf8ab1efbc" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 15 1 0 "dc310f13_c937_477c_832dd9a9ec775215" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 16 1 0 "6895b674_f0f3_461b_ab68f6f36bb3b645" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
FileDirectoryLib::GetFilesInDirectory(strActiveRequestFolderPath, Translate("*"), arrActiveRequestFilePaths);
// }} ""
// {{ 17 1 0 "19f9deb5_1e01_4eeb_9db887a1abd8516a" "{72EACF88-8D49-43e3-92C8-2F90E81E3260}"
intNumberOfActiveRequestFiles=arrActiveRequestFilePaths.GetSize();
// }} ""
// {{ 18 1 0 "131dd8ed_9ce4_4ba6_90549261baf19411" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (intNumberOfActiveRequestFiles != 0)
{
// }} ""
// {{ 19 1 0 "1b8b861f_4ceb_48cb_a0e3a3ac3f6ec65a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 20 1 0 "e9707bec_ee64_4f06_9bf46f4165950896" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::Trace_02(TRACE_LEVEL_DEBUG, Translate("///// intNumberOfActiveRequestFiles = "), intNumberOfActiveRequestFiles);
// }} ""
// {{ 21 1 0 "7f5b7cd3_59d0_4e12_91ad0e6747131651" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(lpCounter1 = 0; lpCounter1 < intNumberOfActiveRequestFiles;)
{
lpCounter1 = lpCounter1 + 1;
// }} ""
// {{ 22 1 0 "32f7440f_8fc2_4d27_9b8d78d1d81df20a" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 23 1 0 "c43aed8b_6c6a_46d7_89a170e05f0eac56" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
blnReturn = FileDirectoryLib::DeleteFile(arrActiveRequestFilePaths.ElementAt( lpCounter1 -1));
// }} ""
// {{ 24 1 0 "376d982d_3fc7_4fb0_a58c1a4ed0b264ad" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (blnReturn == 1)
{
// }} ""
// {{ 25 1 0 "d77561f1_bda0_4f1d_93d944c346e498df" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("Error deleting past active files"));
// }} ""
// {{ 26 1 0 "11e1f3b5_a5f4_43b2_8aa7a23d816114e9" "{930D6C31-8EFB-11d4-A3BA-002035848439}"
abort;
// }} ""
// {{ 27 1 0 "376d982d_3fc7_4fb0_a58c1a4ed0b264ad" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 28 1 0 "7f5b7cd3_59d0_4e12_91ad0e6747131651" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 29 1 0 "131dd8ed_9ce4_4ba6_90549261baf19411" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{{ 30 1 0 "d4d475aa_6d6d_4c85_8acc97c86cc4222a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
TRACELEVEL::Trace_02(TRACE_LEVEL_RELEASE, Translate("----- Cleared previous request files"), Translate(""));
// }} ""
// {{ 31 1 0 "6316ef3a_d14e_41d2_bdd6dfeccf18e1be" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 32 1 0 "6478d93a_08c5_418e_9134f3b1bb3ef470" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
_SimModeTesting();
// }} ""
// {{ 33 1 0 "2d2f24a6_35d6_44ae_91d18aab8e21deb3" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
lpCount = 0;
while (1 == 1)
{
lpCount = lpCount + 1;
// }} ""
// {{{ 34 1 0 "c38a26ec_bd50_4f33_85bb09ddcc4e674d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
lpBreak = B_GetWorklist();
// }} ""
// {{ 35 1 0 "facb148d_8c99_4c3e_abebc52d1f366191" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 36 1 0 "2cc54f1f_f216_405a_86fee5fddb4a810f" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 37 1 0 "9eae9467_4df6_4c6d_a90413ca38675391" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (lpBreak == 1)
{
// }} ""
// {{ 38 1 0 "8a15ab22_c509_4efc_97f2ca006f29f8f2" "{B31F3533-5D80-11d4-A5EB-0050DA737D89}"
break;
// }} ""
// {{ 39 1 0 "9eae9467_4df6_4c6d_a90413ca38675391" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 40 1 0 "facb148d_8c99_4c3e_abebc52d1f366191" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{{ 41 1 0 "c0639288_dbe9_4948_a6c0b01a0d6bbc9d" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
C_CreateSeq();
// }} ""
// {{{ 42 1 0 "319b1804_aab1_4076_a69e72f30313dca8" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
D_LoadInstructions();
// }} ""
// {{{ 43 1 0 "fa9ea359_fede_4a22_bf4c333e928028fe" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
E_PipettingSteps();
// }} ""
// {{{ 44 1 0 "dc6ee97f_763e_4516_961bf6b4dc569599" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
F_EndOfRequest();
// }} ""
// {{ 45 1 0 "5f9068de_e6f9_4f59_a4bae866413df227" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 46 1 0 "f9eb3dbd_fb50_4f2d_b6d17a0dd2e47bef" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (lpCount >= 3)
{
// }} ""
// {{ 47 1 0 "ccfe4745_93c1_4c08_9e8656cda0d5575e" "{B31F3533-5D80-11d4-A5EB-0050DA737D89}"
break;
// }} ""
// {{ 48 1 0 "f9eb3dbd_fb50_4f2d_b6d17a0dd2e47bef" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 49 1 0 "5f9068de_e6f9_4f59_a4bae866413df227" "{586C3429-F931-405f-9938-928E22C90BFA}"

// }} ""
// {{ 50 1 0 "2d2f24a6_35d6_44ae_91d18aab8e21deb3" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{{ 51 1 0 "b0f0ad01_d997_439d_921746133e7f3973" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
AswStatusDialog::Terminate();
// }} ""
// {{{ 52 1 0 "1406f710_a8a6_4647_a16310eb27f40bc0" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
SCAP_STARPLUS::Disconnect();
// }} ""
// {{ 53 1 0 "5d92cc20_47fe_4fba_acadbb9cd5b7368c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"
MECC::TraceComment(Translate("############## Method Complete Successfully #################"));
// }} ""
// {{ 54 1 0 "ef436499_2eb5_489d_8081ea5486e619cd" "{998A7CCC-4374-484D-A6ED-E8A4F0EB71BA}"
customDialogEADADE7DEC1B4fa5955C33C0BAC32C9B.InitCustomDialog( "ef436499_2eb5_489d_8081ea5486e619cd" );
customDialogEADADE7DEC1B4fa5955C33C0BAC32C9B.ShowCustomDialog();
// }} ""
// {{ 2 "AutoExitBlock" ""
SANGERGENERAL::_ExitLibrary();
UNIQUE_MEMBERS::_ExitLibrary();
TRACEARRAY::_ExitLibrary();
SCAP_STARPLUS::_ExitLibrary();
UV_STARPLUS::_ExitLibrary();
JSONSEARCH::_ExitLibrary();
LOAD_INSTRUCTIONS::_ExitLibrary();
LOOKUP::_ExitLibrary();
PARALLELPROCESSHANDLING::_ExitLibrary();
DATAMANAGERINTERFACE::_ExitLibrary();
// }} ""
// {{{ 5 "main" "End"
} }
// }} ""
// $$author=Hamilton$$valid=0$$time=2024-02-21 17:28$$checksum=d64a3c9a$$length=087$$