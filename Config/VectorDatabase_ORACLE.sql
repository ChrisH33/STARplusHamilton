DECLARE
 lUser VARCHAR2(255);
BEGIN
  BEGIN
    SELECT USERNAME INTO lUser FROM ALL_USERS WHERE UPPER(USERNAME)=UPPER('%%%VARIABLE_USERNAME%%%');
    EXECUTE IMMEDIATE 'DROP USER ' || '%%%VARIABLE_USERNAME%%%' || ' CASCADE';
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END;
END;
/

CREATE USER %%%VARIABLE_USERNAME%%% IDENTIFIED BY %%%VARIABLE_PASSWORD%%%
/
GRANT CONNECT TO %%%VARIABLE_USERNAME%%% WITH ADMIN OPTION
/
GRANT DBA TO %%%VARIABLE_USERNAME%%% WITH ADMIN OPTION
/
GRANT RESOURCE TO %%%VARIABLE_USERNAME%%% WITH ADMIN OPTION
/
GRANT UNLIMITED TABLESPACE TO %%%VARIABLE_USERNAME%%% WITH ADMIN OPTION
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxError (
	ErrorID NUMBER(19,0) NOT NULL ,
	ErrorCode NVARCHAR2(25) NOT NULL ,
	ErrorMessage NVARCHAR2(255) NOT NULL ,
	InstrumentConfigurationID NUMBER(19,0) NOT NULL 
)
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxExperiment (
	ExperimentID NUMBER(19,0) NOT NULL,
	Name NVARCHAR2(50) NOT NULL ,
	Description NVARCHAR2(255) NULL ,
	ExperimentTime DATE NOT NULL 
)
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
CREATE TABLE %%%VARIABLE_USERNAME%%%.HxInstrument (
	InstrumentID NUMBER(19,0) NOT NULL ,
	InstrumentName NVARCHAR2(50) NOT NULL ,
	SerialNumber NVARCHAR2(50) NULL ,
	InstrumentClass NVARCHAR2(50) NULL 
)
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
CREATE TABLE %%%VARIABLE_USERNAME%%%.HxJob (
	JobID NUMBER(19,0) NOT NULL ,
	JobName NVARCHAR2(50) NULL ,
	JobPriority NUMBER(3,0) NOT NULL ,
	JobState NUMBER(3,0) NOT NULL ,
	UserJobState NUMBER(3,0) NULL ,
	RunID NUMBER(19,0) NULL ,
	SourceElementID NUMBER(19,0) NULL ,
	SourceBarcode NVARCHAR2(255) NULL ,
	SourceLabwareId NVARCHAR2(255) NULL ,
	SourcePositionId NVARCHAR2(50) NULL ,
	SourceRequired NUMBER(1) NOT NULL ,
	TargetElementID NUMBER(19,0) NULL ,
	TargetBarcode NVARCHAR2(255) NULL ,
	TargetLabwareId NVARCHAR2(255) NULL ,
	TargetPositionId NVARCHAR2(50) NULL ,
	TransportVolume FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareMainType (
	LabwareMainTypeID NUMBER(19,0) NOT NULL ,
	Name NVARCHAR2(50) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLiquidClass (
	LiquidClassID NUMBER(19,0) NOT NULL ,
	Name NVARCHAR2(100) NOT NULL ,
	Version VARCHAR(10) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
CREATE TABLE %%%VARIABLE_USERNAME%%%.HxRun (
	RunID NUMBER(19,0) NOT NULL ,
	MethodName NVARCHAR2(255) NOT NULL ,
	RunGUID CHAR(32) NOT NULL ,
	StartTime DATE NULL ,
	EndTime DATE NULL ,
	RunState NUMBER(3,0) NOT NULL ,
	UserRunState NUMBER(3,0) NULL ,
	ComputerName NVARCHAR2(255) NOT NULL ,
	PhoenixVersion CHAR(10) NOT NULL ,
	DBVersion NUMBER(3,0) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxAction (
	ActionID NUMBER(19,0) NOT NULL ,
	ActionType NUMBER(3,0) NOT NULL ,
	ActionTime DATE  NOT NULL ,
	ActionState NUMBER(3,0) NOT NULL ,
	ActionGroup NUMBER(19,0) NOT NULL ,
	RunID NUMBER(19,0) NOT NULL ,
	ErrorID NUMBER(19,0) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentAdditionalData (
	InstrumentAdditionalDataID NUMBER(19,0) NOT NULL ,
	InstrumentID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration (
	InstrumentConfigurationID NUMBER(19,0) NOT NULL ,
	InstrumentID NUMBER(19,0) NOT NULL ,
	SimulationMode NUMBER(1) NOT NULL ,
	SoftwareVersion VARCHAR(10) NULL ,
	FirmwareVersion VARCHAR2(1000) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxJobAdditionalData (
	JobAdditionalDataID NUMBER(19,0) NOT NULL ,
	JobID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareType (
	LabwareTypeID NUMBER(19,0) NOT NULL ,
	LabwareMainTypeID NUMBER(19,0) NULL ,
	Name NVARCHAR2(50) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxRunAction (
	RunActionID NUMBER(19,0) NOT NULL ,
	Action NUMBER(3,0) NOT NULL ,
	Username NVARCHAR2(50) NOT NULL ,
	ActionTime DATE  NOT NULL ,
	RunID NUMBER(19,0) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxRunAdditionalData (
	RunAdditionalDataID NUMBER(19,0) NOT NULL ,
	RunID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionAddSourceBarcode (
	ActionID NUMBER(19,0) NOT NULL ,
	SourceBarcode NVARCHAR2(255) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionAdditionalData (
	ActionAdditionalDataID NUMBER(19,0) NOT NULL ,
	ActionID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionIncubate (
	ActionID NUMBER(19,0) NOT NULL ,
	Duration FLOAT NULL ,
	Temperature FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionMove (
	ActionID NUMBER(19,0) NOT NULL ,
	SourceParentElementID NUMBER(19,0) NULL ,
	TargetParentElementID NUMBER(19,0) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionMoveVolume (
	ActionID NUMBER(19,0) NOT NULL ,
	SourceLabwareVolume FLOAT NOT NULL ,
	TargetLabwareVolume FLOAT NOT NULL ,
	Volume FLOAT NOT NULL ,
	StepType NUMBER(3,0) NOT NULL ,
	ChannelNumber NUMBER(5,0) NOT NULL ,
	LiquidClassID NUMBER(19,0) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionSetBarcode (
	ActionID NUMBER(19,0) NOT NULL ,
	Barcode NVARCHAR2(255) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionSetLabwareState (
	ActionID NUMBER(19,0) NOT NULL ,
	LabwareState NUMBER(3,0) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxActionSetVolume (
	ActionID NUMBER(19,0) NOT NULL ,
	Volume FLOAT NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxDeck (
	DeckID NUMBER(19,0) NOT NULL ,
	RunID NUMBER(19,0) NOT NULL ,
	InstrumentConfigurationID NUMBER(19,0) NOT NULL ,
	ParentDeckID NUMBER(19,0) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfigurationAddit(
	InstrumentConfigurationAdditio NUMBER(19,0) NOT NULL , -- ex InstrumentConfiguration (field and table name)
	InstrumentConfigurationID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxRunActionAdditionalData (
	RunActionAdditionalDataID NUMBER(19,0) NOT NULL ,
	RunActionID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxTADMCurve (
	ActionID NUMBER(19,0) NOT NULL ,
	TADMCurveID NUMBER(10,0) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabware (
	ElementID NUMBER(19,0) NOT NULL ,
	ParentElementID NUMBER(19,0) NULL ,
	DeckID NUMBER(19,0) NULL ,
	LabwareName NVARCHAR2(255) NOT NULL ,
	LabwareLevel NUMBER(3,0) NOT NULL ,
	LabwareTypeID NUMBER(19,0) NULL ,
	Barcode NVARCHAR2(255) NULL ,
	Volume FLOAT NULL ,
	LabwareState NUMBER(3,0) NOT NULL ,
	UserLabwareState NUMBER(3,0) NULL ,
	DeckCoordinateX FLOAT NULL ,
	DeckCoordinateY FLOAT NULL ,
	DeckCoordinateZ FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAction (
	ActionID NUMBER(19,0) NOT NULL ,
	ElementID NUMBER(19,0) NOT NULL ,
	DeckID NUMBER(19,0) NOT NULL ,
	UsageType NUMBER(3,0) NOT NULL ,
	Referenced NUMBER(1) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAdditionalData (
	LabwareAdditionalDataID NUMBER(19,0) NOT NULL ,
	ElementID NUMBER(19,0) NOT NULL ,
	Key NVARCHAR2(50) NOT NULL ,
	ValueType NUMBER(3,0) NOT NULL ,
	StringValue NVARCHAR2(255) NULL ,
	IntegerValue NUMBER(10,0) NULL ,
	FloatValue FLOAT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareExperiment (
	ElementID NUMBER(19,0) NOT NULL ,
	ExperimentID NUMBER(19,0) NOT NULL ,
	ExperimentSource NUMBER(1) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxLabwareRunData (
	ElementID NUMBER(19,0) NOT NULL ,
	RunID NUMBER(19,0) NOT NULL ,
	LabwareState NUMBER(3,0) NOT NULL ,
	Interrupted NUMBER(1) NOT NULL ,
	Aborted NUMBER(1) NOT NULL ,
	ProcessedSteps NUMBER(19,0) NOT NULL ,
	ExpectedProcessedSteps NUMBER(19,0) NOT NULL ,
	LastActionState NUMBER(3,0) NOT NULL ,
	Barcode NVARCHAR2(255) NULL ,
	InitialAccessName NVARCHAR2(255) NOT NULL ,
	InitialLabwareName NVARCHAR2(255) NOT NULL ,
	InitialDeckID NUMBER(19,0) NOT NULL ,
	InitialParentElementID NUMBER(19,0) NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList (
	SourceBarcodeListID NUMBER(19,0) NOT NULL ,
	ActionID NUMBER(19,0) NOT NULL ,
	ElementID NUMBER(19,0) NOT NULL ,
	Barcode NVARCHAR2(255) NOT NULL 
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE TABLE %%%VARIABLE_USERNAME%%%.HxUniqueBarcodeList (
	Barcode NVARCHAR2(255) NOT NULL,
	UniqueBarcode NUMBER(1) NOT NULL,
	LastUsedTime DATE  NOT NULL,
	RunID NUMBER(19,0) NOT NULL
) 
TABLESPACE USERS
  PCTFREE 10
  INITRANS 1
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxError
  ADD CONSTRAINT PK_HxError PRIMARY KEY (ErrorID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxExperiment
  ADD CONSTRAINT PK_HxExperiment PRIMARY KEY (ExperimentID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrument
  ADD CONSTRAINT PK_HxInstrument PRIMARY KEY (InstrumentID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
ALTER TABLE %%%VARIABLE_USERNAME%%%.HxJob
  ADD CONSTRAINT PK_HxJob PRIMARY KEY (JobID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/
ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareMainType
  ADD CONSTRAINT PK_HxLabwareMainType PRIMARY KEY (LabwareMainTypeID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLiquidClass 
  ADD CONSTRAINT PK_HxLiquidClass PRIMARY KEY (LiquidClassID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRun 
  ADD CONSTRAINT PK_HxRun PRIMARY KEY (RunID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxAction 
  ADD CONSTRAINT PK_HxAction PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentAdditionalData 
  ADD CONSTRAINT PK_HxInstrumentAdditionalData PRIMARY KEY (InstrumentAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration 
  ADD CONSTRAINT PK_HxInstrumentConfiguration PRIMARY KEY (InstrumentConfigurationID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxJobAdditionalData 
  ADD CONSTRAINT PK_HxJobAdditionalData PRIMARY KEY (JobAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareType 
  ADD CONSTRAINT PK_HxLabwareType PRIMARY KEY (LabwareTypeID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunAction 
  ADD CONSTRAINT PK_HxRunAction PRIMARY KEY (RunActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionAddSourceBarcode 
  ADD CONSTRAINT PK_HxActionAddLabwareSourceBar PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionAdditionalData 
  ADD CONSTRAINT PK_HxActionAdditionalData PRIMARY KEY (ActionAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionIncubate 
  ADD CONSTRAINT PK_HxActionIncubate PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionMove 
  ADD CONSTRAINT PK_HxActionMove PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionMoveVolume 
  ADD CONSTRAINT PK_HxActionMoveVolume PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetBarcode 
  ADD CONSTRAINT PK_HxActionSetBarcode PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetLabwareState 
  ADD CONSTRAINT PK_HxActionSetLabwareState PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetVolume 
  ADD CONSTRAINT PK_HxActionSetVolume PRIMARY KEY (ActionID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunAdditionalData 
  ADD CONSTRAINT PK_HxHxRunAdditionalData PRIMARY KEY (RunAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxDeck 
  ADD CONSTRAINT PK_HxDeck PRIMARY KEY (DeckID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfigurationAddit 
  ADD CONSTRAINT PK_InstrumentConfigurationAd PRIMARY KEY (InstrumentConfigurationAdditio)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunActionAdditionalData 
  ADD CONSTRAINT PK_HxRunActionAdditionalData PRIMARY KEY (RunActionAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxTADMCurve 
  ADD CONSTRAINT PK_HxTADMCurve PRIMARY KEY (ActionID, TADMCurveID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabware 
  ADD CONSTRAINT PK_HxLabware PRIMARY KEY (ElementID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAction 
  ADD CONSTRAINT PK_HxLabwareAction PRIMARY KEY (ActionID,ElementID,DeckID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAdditionalData 
  ADD CONSTRAINT PK_HxLabwareAdditionalData PRIMARY KEY (LabwareAdditionalDataID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareExperiment 
  ADD CONSTRAINT PK_HxLabwareExperiment PRIMARY KEY (ElementID,ExperimentID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareRunData 
  ADD CONSTRAINT PK_HxLabwareRunData PRIMARY KEY (ElementID,RunID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList 
  ADD CONSTRAINT PK_HxSourceBarcodeList PRIMARY KEY (SourceBarcodeListID)
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxUniqueBarcodeList
  ADD CONSTRAINT PK_HxUniqueBarcodeList PRIMARY KEY (Barcode,UniqueBarcode) 
  USING INDEX 
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_RunAction_RunID ON %%%VARIABLE_USERNAME%%%.HxRunAction(RunID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_Deck_RunID ON %%%VARIABLE_USERNAME%%%.HxDeck(RunID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_Deck ON %%%VARIABLE_USERNAME%%%.HxDeck(ParentDeckID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_TADMCurve_ActionID ON %%%VARIABLE_USERNAME%%%.HxTADMCurve(ActionID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_Labware_ParentElementID ON %%%VARIABLE_USERNAME%%%.HxLabware(ParentElementID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_Labware_DeckID ON %%%VARIABLE_USERNAME%%%.HxLabware(DeckID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_Labware_LabwareName ON %%%VARIABLE_USERNAME%%%.HxLabware(LabwareName)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareAction_ActionID ON %%%VARIABLE_USERNAME%%%.HxLabwareAction(ActionID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareAction_ElementID ON %%%VARIABLE_USERNAME%%%.HxLabwareAction(ElementID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareAction_DeckID ON %%%VARIABLE_USERNAME%%%.HxLabwareAction(DeckID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareExperiment_ElementID ON %%%VARIABLE_USERNAME%%%.HxLabwareExperiment(ElementID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareExp_ExperimentID ON %%%VARIABLE_USERNAME%%%.HxLabwareExperiment(ExperimentID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareRunData_IniDeckID ON %%%VARIABLE_USERNAME%%%.HxLabwareRunData(InitialDeckID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_LabwareRunData_IniParElemID ON %%%VARIABLE_USERNAME%%%.HxLabwareRunData(InitialParentElementID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_SourceBarcodeList_ActionID ON %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList(ActionID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/

CREATE INDEX %%%VARIABLE_USERNAME%%%.IX_SourceBarcodeList_ElementID ON %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList(ElementID)
  TABLESPACE USERS
  PCTFREE 10
  INITRANS 2
  MAXTRANS 255
  STORAGE
  (
    INITIAL 64K
    MINEXTENTS 1
    MAXEXTENTS UNLIMITED
  )
/


ALTER TABLE %%%VARIABLE_USERNAME%%%.HxAction ADD 
	CONSTRAINT FK_HxAction_HxError FOREIGN KEY 
	(
		ErrorID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxError (
		ErrorID
	) ADD
	CONSTRAINT FK_HxAction_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentAdditionalData ADD 
	CONSTRAINT FK_HxInstrAddData_HxInstr FOREIGN KEY 
	(
		InstrumentID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxInstrument (
		InstrumentID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration ADD 
	CONSTRAINT FK_HxInstrConfig_HxInstr FOREIGN KEY 
	(
		InstrumentID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxInstrument (
		InstrumentID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxJobAdditionalData ADD 
	CONSTRAINT FK_HxJobAdditionalData_HxJob FOREIGN KEY 
	(
		JobID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxJob (
		JobID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareType ADD 
	CONSTRAINT FK_HxLabwType_HxLabwMainType FOREIGN KEY 
	(
		LabwareMainTypeID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabwareMainType (
		LabwareMainTypeID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunAction ADD 
	CONSTRAINT FK_HxRunAction_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunAdditionalData ADD 
	CONSTRAINT FK_HxRunAdditionalData_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionAddSourceBarcode ADD 
	CONSTRAINT FK_HxActAddSrcBarcode_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionAdditionalData ADD 
	CONSTRAINT FK_HxActAddData_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionIncubate ADD 
	CONSTRAINT FK_HxActIncubate_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionMove ADD 
	CONSTRAINT FK_HxActMove_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionMoveVolume ADD 
	CONSTRAINT FK_HxActMoveVolume_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	) ADD
	CONSTRAINT FK_HxActMoveVol_HxLiqClass FOREIGN KEY 
	(
		LiquidClassID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLiquidClass (
		LiquidClassID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetBarcode ADD 
	CONSTRAINT FK_HxActSetBarcode_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetLabwareState ADD 
	CONSTRAINT FK_HxActSetLabwState_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxActionSetVolume ADD 
	CONSTRAINT FK_HxActSetVol_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxDeck ADD 
	CONSTRAINT FK_HxDeck_HxDeck FOREIGN KEY 
	(
		ParentDeckID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxDeck (
		DeckID
	) ADD
	CONSTRAINT FK_HxDeck_HxInstrConfig FOREIGN KEY 
	(
		InstrumentConfigurationID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration (
		InstrumentConfigurationID
	) ADD
	CONSTRAINT FK_HxDeck_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxInstrumentConfigurationAddit ADD 
	CONSTRAINT FK_HxICAddData_HxIConfig FOREIGN KEY 
	(
		InstrumentConfigurationID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration (
		InstrumentConfigurationID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxRunActionAdditionalData ADD 
	CONSTRAINT FK_HxRunActAddData_HxRunAct FOREIGN KEY 
	(
		RunActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRunAction (
		RunActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxTADMCurve ADD 
	CONSTRAINT FK_HxTADMCurve_HxActMoveVol FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxActionMoveVolume (
		ActionID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabware ADD 
	CONSTRAINT FK_HxLabware_HxDeck FOREIGN KEY 
	(
		DeckID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxDeck (
		DeckID
	) ADD
	CONSTRAINT FK_HxLabware_HxLabware FOREIGN KEY 
	(
		ParentElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	) ADD
	CONSTRAINT FK_HxLabware_HxLabwareType FOREIGN KEY 
	(
		LabwareTypeID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabwareType (
		LabwareTypeID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAction ADD 
	CONSTRAINT FK_HxLabwareAct_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	) ADD
	CONSTRAINT FK_HxLabwareAct_HxDeck FOREIGN KEY 
	(
		DeckID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxDeck (
		DeckID
	) ADD
	CONSTRAINT FK_HxLabwareAct_HxLabware FOREIGN KEY 
	(
		ElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareAdditionalData ADD 
	CONSTRAINT FK_HxLabwAddData_HxLabw FOREIGN KEY 
	(
		ElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareExperiment ADD 
	CONSTRAINT FK_HxLabwExp_HxExp FOREIGN KEY 
	(
		ExperimentID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxExperiment (
		ExperimentID
	) ADD
	CONSTRAINT FK_HxLabwExp_HxLabw FOREIGN KEY 
	(
		ElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxLabwareRunData ADD 
	CONSTRAINT FK_HxLabwRunData_HxDeck FOREIGN KEY 
	(
		InitialDeckID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxDeck (
		DeckID
	) ADD
	CONSTRAINT FK_HxLabwRunData_HxLabw FOREIGN KEY 
	(
		ElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	) ADD
	CONSTRAINT FK_HxLabwRunData_HxLabw_Par FOREIGN KEY 
	(
		InitialParentElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	) ADD
	CONSTRAINT FK_HxLabwareRunData_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList ADD 
	CONSTRAINT FK_HxSourceBarcList_HxAct FOREIGN KEY 
	(
		ActionID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxAction (
		ActionID
	) ADD
	CONSTRAINT FK_HxSourceBarcList_HxLabw FOREIGN KEY 
	(
		ElementID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxLabware (
		ElementID
	)
/

ALTER TABLE %%%VARIABLE_USERNAME%%%.HxUniqueBarcodeList ADD 
	CONSTRAINT FK_HxUniqueBarcList_HxRun FOREIGN KEY 
	(
		RunID
	) REFERENCES %%%VARIABLE_USERNAME%%%.HxRun (
		RunID
	)
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$ErrorID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$ExperimentID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$InstrumentID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$JobID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$LabwareMainTypeID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$LiquidClassID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$RunID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$ActionID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$InstrumentAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$InstrumentConfigurationID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$JobAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$LabwareTypeID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$RunActionID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$RunAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$ActionAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$DeckID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$InstrumentConfigurationAdd
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$RunActionAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$ElementID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$LabwareAdditionalDataID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE SEQUENCE %%%VARIABLE_USERNAME%%%.S$SourceBarcodeListID
MINVALUE 1
MAXVALUE 9999999999999999999
START WITH 1
INCREMENT BY 1
NOCACHE
ORDER
/

CREATE OR REPLACE PACKAGE %%%VARIABLE_USERNAME%%%.HAMILTON IS
PROCEDURE spSetIdentity
(
 pSequence          NUMBER
);

FUNCTION spGetIdentity
RETURN NUMBER;

END HAMILTON;
/


CREATE OR REPLACE PACKAGE BODY %%%VARIABLE_USERNAME%%%.HAMILTON IS
 gIdentity        NUMBER;
PROCEDURE spSetIdentity
(
 pSequence          NUMBER
) IS
BEGIN
  gIdentity := pSequence;
  NULL;
END;

FUNCTION spGetIdentity
RETURN NUMBER IS
BEGIN
  RETURN gIdentity;
END;

END HAMILTON;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spClearSourceBarcodeList
(
 pElementID                NUMBER
)
IS
BEGIN
 DELETE FROM HxSourceBarcodeList WHERE ElementID = pElementID;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spClearExperimentList
(
 pElementID                NUMBER
)
IS
BEGIN
 DELETE FROM HxLabwareExperiment WHERE ElementID = pElementID AND ExperimentSource = 0;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUnassignSingleLabwareFromJob -- name trunc
(
 pRunID                    NUMBER,
 pElementID                NUMBER
)
IS
 pJobStateAssigned         NUMBER(3,0) := 8; -- HxVectorDbJobState.Assigned
 pJobStateUnprocessed      NUMBER(3,0) := 1; -- HxVectorDbJobState.Unprocessed
BEGIN
 UPDATE HxJob SET RunID = NULL, SourceElementID = NULL, TargetElementID = NULL, JobState = pJobStateUnprocessed
 WHERE  RunID = pRunID AND JobState = pJobStateAssigned AND ((SourceElementID = pElementID) OR (TargetElementID = pElementID));
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spCreateLabware
(
 pRunID             NUMBER,
 pInitialAccessName NVARCHAR2,
 pParentElementID   NUMBER,
 pDeckID            NUMBER,
 pLabwareName       NVARCHAR2,
 pLabwareLevel      NUMBER,
 pBarcode           NVARCHAR2,
 pLabwareState      NUMBER,
 pActionState       NUMBER,
 pDeckCoordinateX   FLOAT DEFAULT NULL,
 pDeckCoordinateY   FLOAT DEFAULT NULL,
 pDeckCoordinateZ   FLOAT DEFAULT NULL,
 pLoadLabware       NUMBER DEFAULT 1,
 poElementID        OUT NUMBER
)
IS
BEGIN

 IF (pLoadLabware = 1) THEN
 BEGIN
  INSERT INTO HxLabware (ParentElementID, DeckID, LabwareName, LabwareLevel, Barcode, LabwareState, DeckCoordinateX, DeckCoordinateY, DeckCoordinateZ)
  VALUES                (pParentElementID,  pDeckID,  pLabwareName,  pLabwareLevel,  pBarcode,  pLabwareState,  pDeckCoordinateX,  pDeckCoordinateY,  pDeckCoordinateZ);
 END;
 ELSE
 BEGIN
  INSERT INTO HxLabware (ParentElementID, DeckID, LabwareName, LabwareLevel, Barcode, LabwareState, DeckCoordinateX, DeckCoordinateY, DeckCoordinateZ)
  VALUES                (pParentElementID, NULL, pLabwareName, pLabwareLevel,  pBarcode,  pLabwareState,  pDeckCoordinateX,  pDeckCoordinateY,  pDeckCoordinateZ);
 END;
 END IF;

 poElementID := HAMILTON.spGetIdentity;

 INSERT INTO HxLabwareRunData (ElementID, RunID, LabwareState, LastActionState, Interrupted, Aborted, ProcessedSteps, ExpectedProcessedSteps, Barcode, InitialAccessName, InitialLabwareName, InitialDeckID, InitialParentElementID)
 VALUES                       (poElementID, pRunID, pLabwareState, pActionState,       0,             0,         0,                0,                       pBarcode,  pInitialAccessName,  pLabwareName,         pDeckID,         pParentElementID);
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUpdateLabwareData
(
 pRunID                    NUMBER,
 pElementID                NUMBER,
 pConnected                INTEGER DEFAULT NULL,
 pIncrementProcessedSteps  INTEGER DEFAULT NULL,
 pClearSourceBarcodeList   INTEGER DEFAULT NULL,
 pLabwareState             INTEGER DEFAULT NULL,
 pActionState              INTEGER DEFAULT NULL,
 pInterrupted              INTEGER DEFAULT NULL,
 pAborted                  INTEGER DEFAULT NULL,
 pBarcode                  NVARCHAR2 DEFAULT NULL,
 pVolume                   FLOAT DEFAULT NULL,
 pLabwareName              NVARCHAR2 DEFAULT NULL,
 pParentElementID          NUMBER DEFAULT NULL,
 pDeckID                   NUMBER DEFAULT NULL,
 pDeckCoordinateX          FLOAT DEFAULT NULL,
 pDeckCoordinateY          FLOAT DEFAULT NULL,
 pDeckCoordinateZ          FLOAT DEFAULT NULL
) IS
 pOldParentElementID       NUMBER(19,0);
 pCurrentLabwareState      NUMBER(3,0);
 pCurrentLastActionState   NUMBER(3,0);
 pCurrentInterrupted       NUMBER(1,0);
 pCurrentAborted           NUMBER(1,0);
 pCurrentBarcode           NVARCHAR2(255);
 pCurrentProcessedSteps    NUMBER(19,0);
 pCurrentVolume            FLOAT;
 pCurrentLabwareName       NVARCHAR2(255);
 pCurrentParentElementID   NUMBER(19,0);
 pCurrentDeckID            NUMBER(19,0);
 pCurrentDeckCoordinateX   FLOAT;
 pCurrentDeckCoordinateY   FLOAT;
 pCurrentDeckCoordinateZ   FLOAT;
 piConnected               NUMBER(10,0) := NVL(pConnected, 0);
 piIncrementProcessedSteps NUMBER(10,0) := NVL(pIncrementProcessedSteps, 0);
 piClearSourceBarcodeList  NUMBER(10,0) := NVL(pClearSourceBarcodeList, 0);
BEGIN

 SELECT LabwareState, LastActionState, Interrupted, Aborted, Barcode, ProcessedSteps
 INTO   pCurrentLabwareState, pCurrentLastActionState, pCurrentInterrupted, pCurrentAborted, pCurrentBarcode, pCurrentProcessedSteps
 FROM   HxLabwareRunData WHERE RunID = pRunID AND ElementID = pElementID;
 SELECT Volume, LabwareName, ParentElementID, DeckID, DeckCoordinateX, DeckCoordinateY, DeckCoordinateZ
 INTO   pCurrentVolume, pCurrentLabwareName, pCurrentParentElementID, pCurrentDeckID, pCurrentDeckCoordinateX, pCurrentDeckCoordinateY, pCurrentDeckCoordinateZ
 FROM   HxLabware WHERE ElementID = pElementID;
 pOldParentElementID := pCurrentParentElementID;
 pCurrentLabwareState    := NVL(pLabwareState,    pCurrentLabwareState);
 pCurrentLastActionState := NVL(pActionState,     pCurrentLastActionState);
 pCurrentInterrupted     := NVL(pInterrupted,     pCurrentInterrupted);
 pCurrentAborted         := NVL(pAborted,         pCurrentAborted);
 pCurrentBarcode         := NVL(pBarcode,         pCurrentBarcode);
 pCurrentVolume          := NVL(pVolume,          pCurrentVolume);
 pCurrentLabwareName     := NVL(pLabwareName,     pCurrentLabwareName);
 pCurrentParentElementID := NVL(pParentElementID, pCurrentParentElementID);
 pCurrentDeckID          := NVL(pDeckID,          pCurrentDeckID);
 pCurrentDeckCoordinateX := NVL(pDeckCoordinateX, pCurrentDeckCoordinateX);
 pCurrentDeckCoordinateY := NVL(pDeckCoordinateY, pCurrentDeckCoordinateY);
 pCurrentDeckCoordinateZ := NVL(pDeckCoordinateZ, pCurrentDeckCoordinateZ);
 IF (pCurrentDeckID = -1) THEN
 BEGIN
  pCurrentDeckID := NULL;
 END;
 END IF;
 IF (piIncrementProcessedSteps > 0) THEN
 BEGIN
  pCurrentProcessedSteps := pCurrentProcessedSteps + 1;
 END;
 ELSIF (piIncrementProcessedSteps < 0) THEN
 BEGIN
  pCurrentProcessedSteps := 0;
 END;
 END IF;
 IF (piConnected = 0) THEN
 BEGIN
  UPDATE HxLabwareRunData SET LabwareState = pCurrentLabwareState, LastActionState = pCurrentLastActionState, Interrupted = pCurrentInterrupted, Aborted = pCurrentAborted, ProcessedSteps = pCurrentProcessedSteps, Barcode = pCurrentBarcode WHERE RunID = pRunID AND ElementID = pElementID;
  UPDATE HxLabware SET LabwareState = pCurrentLabwareState, Barcode = pCurrentBarcode, Volume = pCurrentVolume, DeckID = pCurrentDeckID, ParentElementID = pCurrentParentElementID, LabwareName = pCurrentLabwareName, DeckCoordinateX = pCurrentDeckCoordinateX, DeckCoordinateY = pCurrentDeckCoordinateY, DeckCoordinateZ = pCurrentDeckCoordinateZ WHERE ElementID = pElementID;
  IF (piClearSourceBarcodeList != 0) THEN
  BEGIN
   spClearSourceBarcodeList (pElementID);
   spClearExperimentList (pElementID);
  END;
  END IF;
  IF (pCurrentDeckID IS NULL) THEN
  BEGIN
   spUnassignSingleLabwareFromJob (pRunID, pElementID);
  END;
  END IF;
 END;
 ELSE
 BEGIN
  UPDATE HxLabwareRunData SET LabwareState = pCurrentLabwareState, LastActionState = pCurrentLastActionState, Interrupted = pCurrentInterrupted, Aborted = pCurrentAborted, ProcessedSteps = pCurrentProcessedSteps, Barcode = pCurrentBarcode WHERE RunID = pRunID AND ElementID IN (SELECT ElementID FROM HxLabware WHERE ParentElementID = pOldParentElementID);
  IF (piClearSourceBarcodeList != 0) THEN
  BEGIN
   spClearSourceBarcodeList (pOldParentElementID);
   spClearExperimentList (pOldParentElementID);
  END;
  END IF;
  IF (pCurrentDeckID IS NULL) THEN
  BEGIN
   spUnassignSingleLabwareFromJob (pRunID, pOldParentElementID);
  END;
  END IF;
  UPDATE HxLabware SET LabwareState = pCurrentLabwareState, Barcode = pCurrentBarcode, Volume = pCurrentVolume, DeckID = pCurrentDeckID, ParentElementID = pCurrentParentElementID, LabwareName = pCurrentLabwareName, DeckCoordinateX = pCurrentDeckCoordinateX, DeckCoordinateY = pCurrentDeckCoordinateY, DeckCoordinateZ = pCurrentDeckCoordinateZ WHERE ParentElementID = pOldParentElementID;
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spLinkLabware
(
 pElementID              NUMBER,
 pConnected              NUMBER,
 pReferenced             NUMBER,
 pLinkChildren           NUMBER,
 pActionID               NUMBER,
 pDeckID                 NUMBER,
 pUsageType              NUMBER,
 pIgnoreUnloadedChildren NUMBER DEFAULT 0
)
IS
 pParentElementID NUMBER(19,0);
BEGIN
 IF (pConnected = 0) THEN
 BEGIN
  BEGIN
  INSERT INTO HxLabwareAction (ElementID, ActionID, DeckID, UsageType, Referenced)
                       VALUES (pElementID,  pActionID,  pDeckID,  pUsageType,  pReferenced);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  IF (pLinkChildren = 1) THEN
  BEGIN
   FOR li IN 
   (
     SELECT ElementID, DeckID FROM HxLabware WHERE ParentElementID = pElementID ORDER BY 1 ASC
   )
   LOOP
    IF ((pIgnoreUnloadedChildren = 0) OR (li.DeckID IS NOT NULL)) THEN
    BEGIN
     spLinkLabware (li.ElementID, 0, 0, 1, pActionID, pDeckID, pUsageType, pIgnoreUnloadedChildren);
    END;
    END IF;
   END LOOP;
  END;
  END IF;
 END;
 ELSE
 BEGIN
  SELECT ParentElementID INTO pParentElementID FROM HxLabware WHERE ElementID = pElementID ORDER BY 1 ASC;
  spLinkLabware (pParentElementID, 0, 0, pLinkChildren, pActionID, pDeckID, pUsageType, pIgnoreUnloadedChildren);
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_Load
(
 pRunID             NUMBER,
 pActionID          NUMBER,
 pDeckID            NUMBER,
 pParentElementID   NUMBER,
 pInitialAccessName NVARCHAR2,
 pLabwareName       NVARCHAR2,
 pLabwareLevel      INTEGER,
 pBarcode           NVARCHAR2,
 pLabwareState      INTEGER,
 pActionState       INTEGER,
 pDeckCoordinateX   FLOAT DEFAULT NULL,
 pDeckCoordinateY   FLOAT DEFAULT NULL,
 pDeckCoordinateZ   FLOAT DEFAULT NULL,
 pUsageType         INTEGER,
 pElementID         NUMBER DEFAULT 0,
 pLoadLabware       INTEGER DEFAULT 1,
 poElementID        OUT NUMBER
) IS
BEGIN
 IF (pElementID > 0) THEN
 BEGIN
  spUpdateLabwareData ( pRunID, pElementID, NULL, NULL, NULL, pLabwareState, pActionState, NULL, NULL, NULL, NULL, pLabwareName, pParentElementID, pDeckID, pDeckCoordinateX, pDeckCoordinateY, pDeckCoordinateZ );
  poElementID := pElementID;
 END;
 ELSE
 BEGIN
  spCreateLabware (pRunID, pInitialAccessName, pParentElementID, pDeckID, pLabwareName, pLabwareLevel, pBarcode, pLabwareState, pActionState, pDeckCoordinateX, pDeckCoordinateY, pDeckCoordinateZ, pLoadLabware, poElementID);
 END;
 END IF;

 IF (pLoadLabware = 1) THEN
  spLinkLabware (poElementID, 0, 1, 0, pActionID, pDeckID, pUsageType);
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_Wash
(
 pRunID                  NUMBER,
 pActionID               NUMBER,
 pActionState            NUMBER,
 pTargetElementID        NUMBER,
 pTargetConnected        NUMBER,
 pLabwareState           NUMBER,
 pClearSourceBarcodeList NUMBER
)
IS
BEGIN
 spUpdateLabwareData (pRunID, pTargetElementID, pTargetConnected, -1, pClearSourceBarcodeList, pLabwareState, pActionState, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spGetLiquidClassID
(
 pName           NVARCHAR2,
 pVersion        VARCHAR,
 poLiquidClassID OUT NUMBER
)
IS
BEGIN
 IF (pName IS NOT NULL) THEN
 BEGIN
  BEGIN
   SELECT LiquidClassID INTO poLiquidClassID FROM HxLiquidClass WHERE Name=pName AND Version=pVersion;
  EXCEPTION
   WHEN OTHERS THEN
   BEGIN
    INSERT INTO HxLiquidClass (Name, Version) VALUES (pName, pVersion);
    poLiquidClassID := HAMILTON.spGetIdentity;
   END;
  END;
 END;
 ELSE
 BEGIN
  poLiquidClassID := NULL;
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spStartRun
(
 pUpdateIndex    NUMBER,
 pMethodName     NVARCHAR2,
 pRunGUID        VARCHAR2,
 pStartTime      DATE,
 pRunState       NUMBER,
 pComputerName   NVARCHAR2,
 pPhoenixVersion VARCHAR2,
 pDBVersion      NUMBER,
 poRunID         OUT NUMBER
)
IS
BEGIN

 INSERT INTO HxRun (MethodName, RunGUID, StartTime, ComputerName, RunState, PhoenixVersion, DBVersion)
             VALUES (pMethodName,  pRunGUID,  pStartTime,  pComputerName,  pRunState,  pPhoenixVersion,  pDBVersion);

 poRunID := HAMILTON.spGetIdentity;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUpdateRun
(
 pUpdateIndex     NUMBER,
 pRunID           NUMBER,
 pRunState        NUMBER,
 pEndTime         DATE DEFAULT NULL,
 poAffectedRows   OUT NUMBER
)
IS
BEGIN
 UPDATE HxRun SET RunState = pRunState, EndTime = pEndTime WHERE RunID = pRunID;
 poAffectedRows := SQL%ROWCOUNT;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spAddErrorInfo
(
 pActionID                  NUMBER,
 pInstrumentConfigurationID NUMBER,
 pErrorCode                 NVARCHAR2,
 pErrorMessage              NVARCHAR2
)
IS
 pErrorID	NUMBER(19,0);
BEGIN
 BEGIN
  SELECT ErrorID INTO pErrorID FROM HxError WHERE ErrorCode=pErrorCode AND ErrorMessage=pErrorMessage AND InstrumentConfigurationID=pInstrumentConfigurationID;
 EXCEPTION
  WHEN OTHERS THEN
  BEGIN
   INSERT INTO HxError (ErrorCode, ErrorMessage, InstrumentConfigurationID) VALUES (pErrorCode, pErrorMessage, pInstrumentConfigurationID);
   pErrorID := HAMILTON.spGetIdentity;
  END;
 END;
 UPDATE HxAction SET ErrorID = pErrorID WHERE ActionID = pActionID;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spCopyFinishedJobsOfRun
(
 pIndex_RunID NUMBER,
 pRun_RunID   NUMBER
)
IS
BEGIN
 NULL;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spCreateAction
(
 pActionType  NUMBER,
 pActionTime  DATE,
 pActionState NUMBER,
 pActionGroup NUMBER,
 pRunID       NUMBER,
 poActionID   OUT NUMBER
)
IS
BEGIN
 INSERT INTO HxAction (ActionType, ActionTime, ActionState, ActionGroup, RunID)
               VALUES (pActionType,  pActionTime,  pActionState,  pActionGroup,  pRunID);
 poActionID := HAMILTON.spGetIdentity;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spGetLabwareTypeID
(
 pLabwareMainTypeName NVARCHAR2,
 pLabwareTypeName     NVARCHAR2,
 pAllowCreate         NUMBER,
 poLabwareMainTypeID  OUT NUMBER,
 poLabwareTypeID      OUT NUMBER
)
IS
BEGIN
 IF (pLabwareMainTypeName IS NOT NULL) THEN
 BEGIN
  BEGIN
   SELECT LabwareMainTypeID INTO poLabwareMainTypeID  FROM HxLabwareMainType WHERE Name=pLabwareMainTypeName;
  EXCEPTION
  WHEN OTHERS THEN
   BEGIN
    IF (pAllowCreate > 0) THEN
    BEGIN
     INSERT INTO HxLabwareMainType (Name) VALUES (pLabwareMainTypeName);
     poLabwareMainTypeID := HAMILTON.spGetIdentity;
    END;
    ELSE
    BEGIN
     poLabwareMainTypeID := NULL;
    END;
    END IF;
   END;
  END;
 END;
 ELSE
 BEGIN
  poLabwareMainTypeID := NULL;
 END;
 END IF;
 IF (pLabwareTypeName IS NOT NULL) THEN
 BEGIN
  BEGIN
   SELECT LabwareTypeID INTO poLabwareTypeID FROM HxLabwareType WHERE Name=pLabwareTypeName AND LabwareMainTypeID = poLabwareMainTypeID;
  EXCEPTION
  WHEN OTHERS THEN
   BEGIN
    IF (pAllowCreate > 0) THEN
    BEGIN
     INSERT INTO HxLabwareType (LabwareMainTypeID, Name) VALUES (poLabwareMainTypeID, pLabwareTypeName);
     poLabwareTypeID := HAMILTON.spGetIdentity;
    END;
    ELSE
    BEGIN
     poLabwareTypeID := NULL;
    END;
    END IF;
   END;
  END;
 END;
 ELSE
 BEGIN
  poLabwareTypeID := NULL;
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUpdateExperimentLabware
(
 pSourceElementID NUMBER,
 pTargetElementID NUMBER
)
IS
BEGIN
 INSERT INTO HxLabwareExperiment (ElementID,      ExperimentID, ExperimentSource)
                           SELECT pTargetElementID, ExperimentID, 0 
                           FROM HxLabwareExperiment
                           WHERE (ElementID = pSourceElementID) AND
                                 (ExperimentID NOT IN (SELECT ExperimentID FROM HxLabwareExperiment WHERE ElementID = pTargetElementID))
                           GROUP BY ExperimentID;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUpdateSourceBarcodeList
(
 pSourceElementID       NUMBER,
 pSourceBarcode         NVARCHAR2,
 pTargetElementID       NUMBER,
 pTargetConnected       NUMBER,
 pTargetParentElementID NUMBER,
 pActionID              NUMBER
)
IS
 pTargetBarcode NVARCHAR2(255);
BEGIN
 IF (pTargetConnected = 0) THEN
 BEGIN
 	SELECT Barcode INTO pTargetBarcode FROM HxLabware WHERE ElementID = pTargetElementID;

  IF ((pSourceBarcode IS NULL) AND (pTargetBarcode IS NULL)) THEN
  BEGIN
   INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetElementID, Barcode FROM HxSourceBarcodeList WHERE (ElementID = pSourceElementID) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NULL) AND (pTargetBarcode IS NOT NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pTargetBarcode)) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NOT NULL) AND (pTargetBarcode IS NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pSourceBarcode)) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NOT NULL) AND (pTargetBarcode IS NOT NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pSourceBarcode) AND (Barcode != pTargetBarcode)) GROUP BY Barcode);
  END;
  END IF;

  IF (pSourceBarcode IS NOT NULL) THEN
   INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) VALUES (pActionID, pTargetElementID, pSourceBarcode);
  END IF;
 END;
 ELSE
 BEGIN
 	SELECT Barcode INTO pTargetBarcode FROM HxLabware WHERE ElementID = pTargetParentElementID;

  IF ((pSourceBarcode IS NULL) AND (pTargetBarcode IS NULL)) THEN
  BEGIN
   INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetParentElementID, Barcode FROM HxSourceBarcodeList WHERE (ElementID = pSourceElementID) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NULL) AND (pTargetBarcode IS NOT NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetParentElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pTargetBarcode)) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NOT NULL) AND (pTargetBarcode IS NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetParentElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pSourceBarcode)) GROUP BY Barcode);
  END;
  ELSIF ((pSourceBarcode IS NOT NULL) AND (pTargetBarcode IS NOT NULL)) THEN
  BEGIN
  	INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) (SELECT pActionID, pTargetParentElementID, Barcode FROM HxSourceBarcodeList WHERE ((ElementID = pSourceElementID) AND (Barcode != pSourceBarcode) AND (Barcode != pTargetBarcode)) GROUP BY Barcode);
  END;
  END IF;

  IF (pSourceBarcode IS NOT NULL) THEN
   INSERT INTO HxSourceBarcodeList (ActionID, ElementID, Barcode) VALUES (pActionID, pTargetParentElementID, pSourceBarcode);
  END IF;
 END;
 END IF;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_MoveVolume_Liqui
(
 pRunID              NUMBER,
 pActionID           NUMBER,
 pActionState        NUMBER,
 pSourceElementID    NUMBER,
 pSourceConnected    NUMBER,
 pTargetElementID    NUMBER,
 pTargetConnected    NUMBER,
 pTargetLabwareState NUMBER,
 pVolume             FLOAT,
 pStepType           NUMBER,
 pChannelNumber      NUMBER,
 pLiquidClassID      NUMBER,
 pClearSourceIfEmpty NUMBER,
 poSourceWasCleared  OUT NUMBER
)
IS
 pSourceLabwareVolume FLOAT;
 pTargetLabwareVolume FLOAT;
 pSourceBarcode NVARCHAR2(255);
 pTargetParentElementID NUMBER(19,0);
BEGIN
 SELECT NVL(Volume, 0.0), Barcode INTO pSourceLabwareVolume, pSourceBarcode FROM HxLabware WHERE ElementID=pSourceElementID;
 SELECT NVL(Volume, 0.0), ParentElementID INTO pTargetLabwareVolume, pTargetParentElementID FROM HxLabware WHERE ElementID=pTargetElementID;
 pSourceLabwareVolume := pSourceLabwareVolume - pVolume;
 pTargetLabwareVolume := pTargetLabwareVolume + pVolume;
 spUpdateLabwareData (pRunID, pSourceElementID, pSourceConnected, 1, 0, NULL, NULL, NULL, NULL, NULL, pSourceLabwareVolume, NULL, NULL, NULL, NULL, NULL, NULL);
 spUpdateLabwareData (pRunID, pTargetElementID, pTargetConnected, 1, 0, pTargetLabwareState, pActionState, NULL, NULL, NULL, pTargetLabwareVolume, NULL, NULL, NULL, NULL, NULL, NULL);
 spUpdateSourceBarcodeList (pSourceElementID, pSourceBarcode, pTargetElementID, pTargetConnected, pTargetParentElementID, pActionID);
 spUpdateExperimentLabware (pSourceElementID, pTargetElementID);
 INSERT INTO HxActionMoveVolume (ActionID, SourceLabwareVolume, TargetLabwareVolume, Volume, StepType, ChannelNumber, LiquidClassID)
                         VALUES (pActionID,  pSourceLabwareVolume,  pTargetLabwareVolume,  pVolume,  pStepType,  pChannelNumber,  pLiquidClassID);                         
 IF ((pClearSourceIfEmpty = 1) AND (pSourceLabwareVolume = 0)) THEN
 BEGIN
  spUpdateLabwareData( pRunID, pSourceElementID, pSourceConnected, -1, 1, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  poSourceWasCleared := 1;
 END;
 ELSE
 BEGIN
  poSourceWasCleared := 0;
 END;
 END IF;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_MoveVolume
(
 pRunID              NUMBER,
 pActionID           NUMBER,
 pActionState        NUMBER,
 pSourceElementID    NUMBER,
 pSourceConnected    NUMBER,
 pTargetElementID    NUMBER,
 pTargetConnected    NUMBER,
 pTargetLabwareState NUMBER,
 pVolume             FLOAT,
 pStepType           NUMBER,
 pChannelNumber      NUMBER,
 pLiquidClassName    NVARCHAR2,
 pLiquidClassVersion VARCHAR2,
 pClearSourceIfEmpty NUMBER,
 poSourceWasCleared  OUT NUMBER
)
IS
 pSourceLabwareVolume FLOAT;
 pTargetLabwareVolume FLOAT;
 pLiquidClassID       NUMBER(19,0);
BEGIN
 spGetLiquidClassID (pLiquidClassName, pLiquidClassVersion, pLiquidClassID);
 spTrackAction_MoveVolume_Liqui (pRunID, pActionID, pActionState, pSourceElementID, pSourceConnected, pTargetElementID, pTargetConnected, pTargetLabwareState, pVolume, pStepType, pChannelNumber, pLiquidClassID, pClearSourceIfEmpty, poSourceWasCleared);
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_AddSourceBarcode
(
 pRunID           NUMBER,
 pActionID        NUMBER,
 pActionState     NUMBER,
 pTargetElementID NUMBER,
 pTargetConnected NUMBER,
 pSourceBarcode   NVARCHAR2,
 pLabwareState    NUMBER
)
IS
 pTargetParentElementID NUMBER(19,0);
BEGIN
 SELECT ParentElementID INTO pTargetParentElementID FROM HxLabware WHERE ElementID=pTargetElementID;
 INSERT INTO HxActionAddSourceBarcode (ActionID, SourceBarcode)
                               VALUES (pActionID, pSourceBarcode);
 spUpdateLabwareData( pRunID, pTargetElementID, pTargetConnected, 0, 0, pLabwareState, pActionState, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
 spUpdateSourceBarcodeList( 0, pSourceBarcode, pTargetElementID, pTargetConnected, pTargetParentElementID, pActionID);
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spDeleteLabwareType_LabwareTyp
(
 pLabwareTypeID NUMBER,
 poAffectedRows OUT NUMBER
)
IS
 ptmpElementID NUMBER(19,0);
BEGIN
 FOR li IN 
 (
  SELECT ElementID FROM HxLabware WHERE LabwareTypeID = pLabwareTypeID
 )
 LOOP
  UPDATE HxLabware SET LabwareTypeID = NULL WHERE LabwareTypeID =pLabwareTypeID;
 END LOOP;
 DELETE FROM HxLabwareType WHERE LabwareTypeID = pLabwareTypeID;
 poAffectedRows := SQL%ROWCOUNT;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spDeleteLabwareMainType_Labwar
(
 pLabwareMainTypeID NUMBER,
 poAffectedRows     OUT NUMBER
)
IS
 -- ptmpLabwareTypeID NUMBER(19,0);
 ptmpAffectedRows  NUMBER(10,0);
BEGIN
 FOR li IN 
 (
  SELECT LabwareTypeID FROM HxLabwareType WHERE LabwareMainTypeID = pLabwareMainTypeID
 )
 LOOP
  spDeleteLabwareType_LabwareTyp( li.LabwareTypeID, ptmpAffectedRows );
 END LOOP;
 DELETE FROM HxLabwareMainType WHERE LabwareMainTypeID = pLabwareMainTypeID;
 poAffectedRows := SQL%ROWCOUNT;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spDeleteLabwareMainType
(
 pLabwareMainTypeName NVARCHAR2,
 poAffectedRows       OUT NUMBER
)
IS
 pLabwareMainTypeID NUMBER(19,0);
BEGIN
 BEGIN
  SELECT LabwareMainTypeID INTO pLabwareMainTypeID FROM HxLabwareMainType WHERE Name=pLabwareMainTypeName;
  spDeleteLabwareMainType_Labwar( pLabwareMainTypeID, poAffectedRows );
 EXCEPTION
 WHEN OTHERS THEN
  BEGIN
   poAffectedRows := -1;
  END;
 END;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUnassignLabwareFromJobs
(
 pRunID  NUMBER,
 pDeckID NUMBER
)
IS
 pJobStateAssigned NUMBER(3,0) := 8; -- HxVectorDbJobState.Assigned
 pJobStateUnprocessed NUMBER(3,0) := 1; -- HxVectorDbJobState.Unprocessed
BEGIN
 UPDATE HxJob SET RunID = NULL, SourceElementID = NULL, TargetElementID = NULL, JobState = pJobStateUnprocessed
            WHERE JobState = pJobStateAssigned AND RunID = pRunID
              AND (
                    (SourceElementID IN (SELECT ElementID FROM HxLabware WHERE DeckID = pDeckID))
                    OR
                    (TargetElementID IN (SELECT ElementID FROM HxLabware WHERE DeckID = pDeckID))
                  );
END;
/



CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spAssignLabwareToJobs
(
 pRunID  NUMBER,
 pDeckID NUMBER
)
IS
 pSourceFilterActive  NUMBER := 0;
 pTargetFilterActive  NUMBER := 0;
 pSourceElementID     NUMBER;
 pTargetElementID     NUMBER;
-- pJobID               NUMBER;
-- pSourceBarcode       NVARCHAR2;
-- pSourceLabwareId     NVARCHAR2;
-- pSourcePositionId    NVARCHAR2;
-- pSourceRequired      NUMBER;
-- pTargetBarcode       NVARCHAR2;
-- pTargetLabwareId     NVARCHAR2;
-- pTargetPositionId    NVARCHAR2;
 pJobStateUnprocessed NUMBER := 1; -- HxVectorDbJobState.Unprocessed
 pJobStateAssigned    NUMBER := 8; -- HxVectorDbJobState.Assigned
BEGIN
 FOR li IN 
 (
  SELECT JobID, SourceBarcode, SourceLabwareId, SourcePositionId, SourceRequired, TargetBarcode, TargetLabwareId, TargetPositionId FROM HxJob WHERE ((JobState = pJobStateUnprocessed) OR ((RunID = pRunID) AND (JobState = pJobStateAssigned)))
 )
 LOOP
  pSourceElementID := NULL;
  pTargetElementID := NULL;

  IF ((li.SourceBarcode IS NOT NULL) AND (li.SourceLabwareId IS NOT NULL) AND (li.SourcePositionId IS NOT NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT pLabware.ElementID INTO pSourceElementID
    FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
    WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.SourceLabwareId) AND (pLabware.LabwareName=li.SourcePositionId) AND (pLabware.Barcode=li.SourceBarcode));
   EXCEPTION
   WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pSourceElementID
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.SourceLabwareId) AND (pLabware.LabwareName=li.SourcePositionId) AND (lLabware.Barcode=li.SourceBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pSourceElementID := NULL;
      END;
     END;
    END;
   END;
  END;
  ELSIF ((li.SourceBarcode IS NOT NULL) AND (li.SourceLabwareId IS NOT NULL) AND (li.SourcePositionId IS NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pSourceElementID FROM HxLabware WHERE ((DeckID = pDeckID) AND (Barcode = li.SourceBarcode) AND (LabwareName = li.SourceLabwareId));
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pSourceElementID
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.SourceLabwareId) AND (pLabware.Barcode=li.SourceBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pSourceElementID := NULL;
      END;
     END;
    END;
   END;
  END;
  ELSIF ((li.SourceBarcode IS NOT NULL) AND (li.SourceLabwareId IS NULL) AND (li.SourcePositionId IS NOT NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pSourceElementID FROM HxLabware WHERE ((DeckID = pDeckID) AND (Barcode = li.SourceBarcode) AND (LabwareName = li.SourcePositionId));
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pSourceElementID
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (pLabware.LabwareName=li.SourcePositionId) AND (lLabware.Barcode=li.SourceBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pSourceElementID := NULL;
      END;
     END;
    END;
   END;
  END;
  ELSIF ((li.SourceBarcode IS NOT NULL) AND (li.SourceLabwareId IS NULL) AND (li.SourcePositionId IS NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pSourceElementID FROM HxLabware WHERE (DeckID = pDeckID) AND (Barcode = li.SourceBarcode);
   EXCEPTION
   WHEN OTHERS THEN
    pSourceElementID := NULL;
   END;
  END;
  ELSIF ((li.SourceBarcode IS NULL) AND (li.SourceLabwareId IS NOT NULL) AND (li.SourcePositionId IS NOT NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT pLabware.ElementID INTO pSourceElementID
    FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
    WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.SourceLabwareId) AND (pLabware.LabwareName=li.SourcePositionId));
   EXCEPTION
   WHEN OTHERS THEN
    pSourceElementID := NULL;
   END;

  END;
  ELSIF ((li.SourceBarcode IS NULL) AND (li.SourceLabwareId IS NOT NULL) AND (li.SourcePositionId IS NULL)) THEN
  BEGIN

   pSourceFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pSourceElementID FROM HxLabware WHERE (DeckID = pDeckID) AND (LabwareName = li.SourceLabwareId);
   EXCEPTION
   WHEN OTHERS THEN
    pSourceElementID := NULL;
   END;

  END;
  END IF;
  
  IF ((li.TargetBarcode IS NOT NULL) AND (li.TargetLabwareId IS NOT NULL) AND (li.TargetPositionId IS NOT NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT pLabware.ElementID INTO pTargetElementID
    FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
    WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.TargetLabwareId) AND (pLabware.LabwareName=li.TargetPositionId) AND (pLabware.Barcode=li.TargetBarcode));
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pTargetElementID
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.TargetLabwareId) AND (pLabware.LabwareName=li.TargetPositionId) AND (lLabware.Barcode=li.TargetBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pTargetElementID := NULL;
      END;
     END;
    END;
   END;

  END;
  ELSIF ((li.TargetBarcode IS NOT NULL) AND (li.TargetLabwareId IS NOT NULL) AND (li.TargetPositionId IS NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pTargetElementID FROM HxLabware WHERE ((DeckID = pDeckID) AND (Barcode = li.TargetBarcode) AND (LabwareName = li.TargetLabwareId));
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pTargetElementID 
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.TargetLabwareId) AND (pLabware.Barcode=li.TargetBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pTargetElementID := NULL;
      END;
     END;
    END;
   END;

  END;
  ELSIF ((li.TargetBarcode IS NOT NULL) AND (li.TargetLabwareId IS NULL) AND (li.TargetPositionId IS NOT NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pTargetElementID FROM HxLabware WHERE ((DeckID = pDeckID) AND (Barcode = li.TargetBarcode) AND (LabwareName = li.TargetPositionId));
   EXCEPTION
    WHEN OTHERS THEN
    BEGIN
     BEGIN
      SELECT pLabware.ElementID INTO pTargetElementID 
      FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
      WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (pLabware.LabwareName=li.TargetPositionId) AND (lLabware.Barcode=li.TargetBarcode));
     EXCEPTION
     WHEN OTHERS THEN
      BEGIN
       pTargetElementID := NULL;
      END;
     END;
    END;
   END;

  END;
  ELSIF ((li.TargetBarcode IS NOT NULL) AND (li.TargetLabwareId IS NULL) AND (li.TargetPositionId IS NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pTargetElementID FROM HxLabware WHERE (DeckID = pDeckID) AND (Barcode = li.TargetBarcode);
   EXCEPTION
   WHEN OTHERS THEN
    pTargetElementID := NULL;
   END;

  END;
  ELSIF ((li.TargetBarcode IS NULL) AND (li.TargetLabwareId IS NOT NULL) AND (li.TargetPositionId IS NOT NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT pLabware.ElementID INTO pTargetElementID 
    FROM HxLabware lLabware INNER JOIN HxLabware pLabware ON pLabware.ParentElementID = lLabware.ElementID
    WHERE ((lLabware.DeckID = pDeckID) AND (pLabware.DeckID = pDeckID) AND (lLabware.LabwareName=li.TargetLabwareId) AND (pLabware.LabwareName=li.TargetPositionId));
   EXCEPTION
   WHEN OTHERS THEN
    pTargetElementID := NULL;
   END;

  END;
  ELSIF ((li.TargetBarcode IS NULL) AND (li.TargetLabwareId IS NOT NULL) AND (li.TargetPositionId IS NULL)) THEN
  BEGIN

   pTargetFilterActive := 1;
   BEGIN
    SELECT ElementID INTO pTargetElementID FROM HxLabware WHERE (DeckID = pDeckID) AND (LabwareName = li.TargetLabwareId);
   EXCEPTION
   WHEN OTHERS THEN
    pTargetElementID := NULL;
   END;
    
  END;
  END IF;
  
  IF (((pSourceFilterActive = 0) OR ((pSourceFilterActive = 1) AND (pSourceElementID IS NOT NULL))) AND ((pTargetFilterActive = 0) OR ((pTargetFilterActive = 1) AND (pTargetElementID IS NOT NULL)))) THEN
  BEGIN
   IF ((pSourceElementID IS NOT NULL) OR (pTargetElementID IS NOT NULL)) THEN
   BEGIN
    UPDATE HxJob SET RunID = pRunID, SourceElementID = pSourceElementID, TargetElementID = pTargetElementID, JobState = pJobStateAssigned WHERE JobID = li.JobID;
   END;
   END IF;
  END;
  END IF;
 END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUnloadLabware
(
 pRunID     NUMBER,
 pElementID NUMBER
)
IS
BEGIN
 FOR li IN 
 (
  SELECT ElementID FROM HxLabware WHERE ParentElementID = pElementID
 )
 LOOP
  spUnloadLabware( pRunID, li.ElementID );
 END LOOP;
 UPDATE HxLabware SET DeckID=NULL WHERE ElementID = pElementID;
 spUnassignSingleLabwareFromJob( pRunID, pElementID );
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spSetLabwareType_LabwareTypeID
(
 pElementID     NUMBER,
 pLabwareTypeID NUMBER,
 poOK           OUT NUMBER
)
IS
BEGIN
 UPDATE HxLabware SET LabwareTypeID = pLabwareTypeID WHERE ElementID = pElementID;
 IF (SQL%ROWCOUNT > 0) THEN
 BEGIN
  poOK := 1;
 END;
 ELSE
 BEGIN
  poOK := 0;
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spSetLabwareType
(
 pElementID           NUMBER,
 pLabwareMainTypeName NVARCHAR2,
 pLabwareTypeName     NVARCHAR2,
 pAllowCreate         NUMBER,
 poLabwareTypeID      OUT NUMBER,
 poOK                 OUT NUMBER
)
IS
 pLabwareMainTypeID NUMBER(19,0);
BEGIN
 spGetLabwareTypeID( pLabwareMainTypeName, pLabwareTypeName, 1, pLabwareMainTypeID, poLabwareTypeID );
 spSetLabwareType_LabwareTypeID( pElementID, poLabwareTypeID, poOK );
END;
/



CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spDeleteLabwareType
(
 pLabwareMainTypeName NVARCHAR2,
 pLabwareTypeName     NVARCHAR2,
 poAffectedRows       OUT NUMBER
)
IS
 pLabwareMainTypeID NUMBER(19,0);
 pLabwareTypeID NUMBER(19,0);
BEGIN
 spGetLabwareTypeID( pLabwareMainTypeName, pLabwareTypeName, 0, pLabwareMainTypeID, pLabwareTypeID );
 IF (pLabwareTypeID IS NULL) THEN
 BEGIN
  poAffectedRows := -1;
 END;
 ELSE
 BEGIN
  spDeleteLabwareType_LabwareTyp( pLabwareTypeID, poAffectedRows );
 END;
 END IF;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spStartExperiment
(
 pExperimentName            NVARCHAR2,
 pExperimentDescription     NVARCHAR2,
 pExperimentTime            DATE,
 pExperimentSourceElementID NUMBER,
 poExperimentID             OUT NUMBER
)
IS
BEGIN
 INSERT INTO HxExperiment (Name,          Description,          ExperimentTime)
                   VALUES (pExperimentName, pExperimentDescription, pExperimentTime);
 poExperimentID := HAMILTON.spGetIdentity;
 INSERT INTO HxLabwareExperiment (ElementID,                ExperimentID, ExperimentSource)
                          VALUES (pExperimentSourceElementID, poExperimentID,  1);
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_Incubate
(
 pRunID        NUMBER,
 pActionID     NUMBER,
 pActionState  NUMBER,
 pElementID    NUMBER,
 pConnected    NUMBER,
 pLabwareState NUMBER,
 pDuration     FLOAT,
 pTemperature  FLOAT
)
IS
BEGIN
 INSERT INTO HxActionIncubate (ActionID, Duration, Temperature)
                       VALUES (pActionID,  pDuration,  pTemperature);
 spUpdateLabwareData( pRunID, pElementID, pConnected, 1, 0, pLabwareState, pActionState, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_Move
(
 pRunID                 NUMBER,
 pActionID              NUMBER,
 pActionState           NUMBER,
 pElementID             NUMBER,
 pLabwareState          NUMBER,
 pDeckID                NUMBER,
 pLabwareName           VARCHAR2,
 pDeckCoordinateX       FLOAT DEFAULT NULL,
 pDeckCoordinateY       FLOAT DEFAULT NULL,
 pDeckCoordinateZ       FLOAT DEFAULT NULL,
 pSourceParentElementID NUMBER,
 pTargetParentElementID NUMBER
)
IS
BEGIN
 INSERT INTO HxActionMove (ActionID, SourceParentElementID, TargetParentElementID)
                   VALUES (pActionID,  pSourceParentElementID,  pTargetParentElementID);
 spUpdateLabwareData( pRunID, pElementID, 0, 1, 0, pLabwareState, pActionState, NULL, NULL, NULL, NULL, pLabwareName, pTargetParentElementID, pDeckID, pDeckCoordinateX, pDeckCoordinateY, pDeckCoordinateZ );
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackUniqueBarcode
(
 pActionID            NUMBER,
 pBarcode             NVARCHAR2,
 pUniqueBarcode       NUMBER
)
IS
 pRunID      NUMBER(19,0);
 pActionTime DATE;
 pCount      NUMBER(19,0);
BEGIN
 SELECT RunID, ActionTime INTO pRunID, pActionTime FROM HxAction WHERE ActionID = pActionID;
 SELECT COUNT(Barcode) INTO pCount FROM HxUniqueBarcodeList WHERE Barcode = pBarcode AND UniqueBarcode = pUniqueBarcode;
 IF (pCount > 0) THEN
 BEGIN
  UPDATE HxUniqueBarcodeList SET LastUsedTime = pActionTime, RunID = pRunID WHERE Barcode = pBarcode AND UniqueBarcode = pUniqueBarcode;
 END;
 ELSE
 BEGIN
  INSERT INTO HxUniqueBarcodeList (Barcode, UniqueBarcode, LastUsedTime, RunID) VALUES (pBarcode, pUniqueBarcode, pActionTime, pRunID);
 END;
 END IF;
END;
/



CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_SetBarcode
(
 pRunID              NUMBER,
 pActionID           NUMBER,
 pActionState        NUMBER,
 pTargetElementID    NUMBER,
 pTargetConnected    NUMBER,
 pTargetLabwareState NUMBER,
 pBarcode            NVARCHAR2,
 pUniqueBarcode      NUMBER DEFAULT 0,
 pTrackUniqueBarcode NUMBER DEFAULT 0
)
IS
BEGIN
 INSERT INTO HxActionSetBarcode (ActionID, Barcode)
                         VALUES (pActionID, pBarcode);

 IF (pBarcode IS NULL) THEN
 BEGIN
 	UPDATE HxLabware SET Barcode = pBarcode WHERE ElementID = pTargetElementID;
 	UPDATE HxLabwareRunData SET Barcode = pBarcode WHERE ElementID = pTargetElementID;
 END;
 END IF;

 spUpdateLabwareData( pRunID, pTargetElementID, pTargetConnected, 0, 0, pTargetLabwareState, pActionState, NULL, NULL, pBarcode, NULL, NULL, NULL, NULL, NULL, NULL, NULL );

 IF ((pTrackUniqueBarcode > 0) AND (pBarcode IS NOT NULL)) THEN
 BEGIN
  spTrackUniqueBarcode( pActionID, pBarcode, pUniqueBarcode );
 END;
 END IF;
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_SetLabwareState
(
 pRunID           NUMBER,
 pActionID        NUMBER,
 pActionState     NUMBER,
 pTargetElementID NUMBER,
 pTargetConnected NUMBER,
 pLabwareState    NUMBER
)
IS
BEGIN
 INSERT INTO HxActionSetLabwareState (ActionID, LabwareState)
                              VALUES (pActionID,  pLabwareState);
 spUpdateLabwareData( pRunID, pTargetElementID, pTargetConnected, 0, 0, pLabwareState, pActionState, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
END;
/



CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spTrackAction_SetVolume
(
 pRunID           NUMBER,
 pActionID        NUMBER,
 pActionState     NUMBER,
 pTargetElementID NUMBER,
 pTargetConnected NUMBER,
 pVolume          FLOAT,
 pLabwareState    NUMBER
)
IS
BEGIN
 INSERT INTO HxActionSetVolume (ActionID, Volume)
                        VALUES (pActionID,  pVolume);
 spUpdateLabwareData( pRunID, pTargetElementID, pTargetConnected, 0, 0, pLabwareState, pActionState, NULL, NULL, NULL, pVolume, NULL, NULL, NULL, NULL, NULL, NULL);
END;
/


CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spUpdateTADMCurveID
(
 pActionID     NUMBER,
 pTADMCurveID  NUMBER,
 pOActionFound OUT NUMBER
)
IS
 pCount        NUMBER(3,0);
BEGIN
 pOActionFound := 0;
 SELECT COUNT(ActionID) INTO pCount FROM HxActionMoveVolume WHERE ActionID = pActionID;
 IF (pCount > 0) THEN
 BEGIN
  INSERT INTO HxTADMCurve (ActionID, TADMCurveID) VALUES (pActionID, pTADMCurveID);
  pOActionFound := 1;
 END;
 END IF;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spCheckUniqueBarcode_LastUsedT
(
 pBarcode        NVARCHAR2,
 pLastUsedTime   DATE,
 poUniqueBarcode OUT NUMBER
)
IS
BEGIN
 SELECT UniqueBarcode INTO poUniqueBarcode FROM (SELECT UniqueBarcode FROM HxUniqueBarcodeList WHERE (Barcode=pBarcode) AND (LastUsedTime>pLastUsedTime) ORDER BY UniqueBarcode DESC, LastUsedTime DESC) WHERE ROWNUM=1;
 
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
   NULL;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spCheckUniqueBarcode_RunID
(
 pBarcode        NVARCHAR2,
 pRunID          NUMBER,
 poUniqueBarcode OUT NUMBER
)
IS
BEGIN
 SELECT UniqueBarcode INTO poUniqueBarcode FROM (SELECT UniqueBarcode FROM HxUniqueBarcodeList WHERE (Barcode=pBarcode) AND (RunID=pRunID) ORDER BY UniqueBarcode DESC, LastUsedTime DESC) WHERE ROWNUM=1;
 
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
   NULL;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spClearUniqueBarcodes
IS
BEGIN
 DELETE FROM HxUniqueBarcodeList;
END;
/

CREATE OR REPLACE PROCEDURE %%%VARIABLE_USERNAME%%%.spClearUniqueBarcodes_LastUsed
(
 pLastUsedTime   DATE
)
IS
BEGIN
 DELETE FROM HxUniqueBarcodeList WHERE (LastUsedTime < pLastUsedTime);
END;
/


CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxError
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxError
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.ErrorID IS NULL THEN
   SELECT S$ErrorID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.ErrorID  := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxExperiment
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxExperiment
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.ExperimentID IS NULL THEN
   SELECT S$ExperimentID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.ExperimentID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxInstrument
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxInstrument
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.InstrumentID IS NULL THEN
   SELECT S$InstrumentID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.InstrumentID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxJob
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxJob
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.JobID IS NULL THEN
   SELECT S$JobID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.JobID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxLabwareMainType
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxLabwareMainType
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.LabwareMainTypeID IS NULL THEN
   SELECT S$LabwareMainTypeID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.LabwareMainTypeID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxLiquidClass
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxLiquidClass
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.LiquidClassID IS NULL THEN
   SELECT S$LiquidClassID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.LiquidClassID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxRun
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxRun
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.RunID IS NULL THEN
   SELECT S$RunID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.RunID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxAction
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxAction
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.ActionID IS NULL THEN
   SELECT S$ActionID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.ActionID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxInstrumentAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxInstrumentAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.InstrumentAdditionalDataID IS NULL THEN
   SELECT S$InstrumentAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.InstrumentAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxInstrumentConfiguration
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxInstrumentConfiguration
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.InstrumentConfigurationID IS NULL THEN
   SELECT S$InstrumentConfigurationID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.InstrumentConfigurationID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxJobAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxJobAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.JobAdditionalDataID IS NULL THEN
   SELECT S$JobAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.JobAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxLabwareType
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxLabwareType
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.LabwareTypeID IS NULL THEN
   SELECT S$LabwareTypeID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.LabwareTypeID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxRunAction
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxRunAction
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.RunActionID IS NULL THEN
   SELECT S$RunActionID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.RunActionID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxRunAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxRunAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.RunAdditionalDataID IS NULL THEN
   SELECT S$RunAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.RunAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxActionAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxActionAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.ActionAdditionalDataID IS NULL THEN
   SELECT S$ActionAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.ActionAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxDeck
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxDeck
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.DeckID IS NULL THEN
   SELECT S$DeckID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.DeckID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxInstrumentConfigurationAdd
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxInstrumentConfigurationAddit
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.InstrumentConfigurationAdditio IS NULL THEN
   SELECT S$InstrumentConfigurationAdd.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.InstrumentConfigurationAdditio := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxRunActionAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxRunActionAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.RunActionAdditionalDataID IS NULL THEN
   SELECT S$RunActionAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.RunActionAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxLabware
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxLabware
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.ElementID IS NULL THEN
   SELECT S$ElementID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.ElementID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxLabwareAdditionalData
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxLabwareAdditionalData
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.LabwareAdditionalDataID IS NULL THEN
   SELECT S$LabwareAdditionalDataID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.LabwareAdditionalDataID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/

CREATE OR REPLACE TRIGGER %%%VARIABLE_USERNAME%%%.T$HxSourceBarcodeList
BEFORE INSERT ON %%%VARIABLE_USERNAME%%%.HxSourceBarcodeList
FOR EACH ROW
DECLARE
  pSeq   NUMBER(19,0);
BEGIN
IF :NEW.SourceBarcodeListID IS NULL THEN
   SELECT S$SourceBarcodeListID.NEXTVAL
   INTO   pSeq
   FROM   DUAL;
  :NEW.SourceBarcodeListID := pSeq;
  HAMILTON.spSetIdentity(pSeq);
END IF;
END;
/
-- $$author=wbarmettler$$valid=0$$time=2017-03-09 07:08$$checksum=f0f6d223$$length=090$$