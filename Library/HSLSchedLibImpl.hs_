//  -------------------------------------------------------------------------------------
//  Hamilton Company Software Product.
//  File: HSLSchedLibImpl.hs_
//
//  File creation date:  2005-06-02 by GZa
//  Last revision date:  2005-08-19 by GZa
//
//  Copyright (c) 2005 by Hamilton Bonaduz AG.
//
//
//  Modification History
//  --------------------
//  1.00  2005-08-19 by GZa  Initial file creation.
//  1.10  2006-08-26 by GZa  new functions added:
//                             - ResSetDistribution()
//                             - SchedGetCurrentActivityDuration()
//                             - SchedSetTaskViewName()
//                             - SchedGetSchedulerSettings2()
//                             - SchedSetSchedulerSettings2()
//                             - SchedGetEstimatedActivityDuration()
//                             - SchedResetActivityDurationLog()
//                             - SchedGetCurrentActivityPlannedDuration()
//                             - SchedRescheduleActivities()
//  -------------------------------------------------------------------------------------

#pragma once


namespace SchedLib
{

	namespace STR							// Include the StringTable library in its own namespace!
	{
		#ifndef __HSLStringTableLib_hsl__
		#include "HSLStringTableLib.hs_"
		#endif
	}


// ======================================================================================
// Declaration
// ======================================================================================

	// -----------------------------------------------------------------------------------
	// Resource functions
	// -----------------------------------------------------------------------------------
	function ResGetMaxCount( resource& resObj ) variable;
	function ResGetEnabledCount( resource& resObj ) variable;
	function ResGetViewName( resource& resObj ) variable;
	function ResGetAvailable( resource& resObj ) variable;
	function ResDisable( resource& resObj, variable unit, variable cancelTaskOnDemand ) variable;
	function ResEnable( resource& resObj, variable unit ) variable;
	function ResEqualsToResource( resource& resObj, resource& resCmp ) variable;
	function ResIsEnabled( resource& resObj, variable unit ) variable;
	function ResDisableAll( resource& resObj, variable cancelTaskOnDemand ) variable;
	function ResEnableAll( resource& resObj ) variable;
	function ResSetDistribution( resource& resObj, variable distribution, variable distributionOption ) variable;


	// -----------------------------------------------------------------------------------
	// Sequence functions
	// -----------------------------------------------------------------------------------
//	function SeqGetMaxPositions( sequence& seqObj ) variable;
//	function SeqGetAvailablePositions( sequence& seqObj ) variable;
//	function SeqAcquirePositions( sequence& seqObj, variable count, variable& currentPosition ) variable;
//	function SeqReleasePositions( sequence& seqObj, variable positionsHandle ) variable;


	// -----------------------------------------------------------------------------------
	// Scheduler functions
	// -----------------------------------------------------------------------------------
	function SchedGetCurrentTaskId() variable;
	function SchedGetCurrentTaskViewName() variable;
	function SchedGetTaskViewName( variable taskId ) variable;
	function SchedGetMethodViewName( variable taskId ) variable;
	function SchedGetCurrentActivityViewName() variable;
	function SchedGetWorkflowFileName() variable;
	function SchedTaskIsCancelable( variable taskId ) variable;
	function SchedTaskIsUnschedulable( variable taskId ) variable;
	function SchedUnscheduleTask( variable taskId, variable removeTask ) variable;
	function SchedGetTaskStatus( variable taskId ) variable;
	function SchedSetMethodProperties( variable methodId, variable isVisible ) variable;
	function SchedSetTaskProperties( variable taskId, variable isUnschedulable, variable isCancelable ) variable;
	function SchedEnableReschedule()	void;
	function SchedDisableReschedule() void;
	function SchedRescheduleIsEnabled() variable;
	function SchedGetSchedulerSettings( variable& controlCycleTime, variable& taskPreActivationTime, variable& controlPolicy,
						variable& errorPolicy, variable& branchingMode, variable& maxDisposableTasks, variable& maxOptimizedUnits,
						variable& maxActivityDurationFactor, variable& searchingIntervalFactor ) void;
	function SchedSetSchedulerSettings( variable controlCycleTime, variable taskPreActivationTime, variable controlPolicy,
						variable errorPolicy, variable branchingMode, variable maxDisposableTasks, variable maxOptimizedUnits,
						variable maxActivityDurationFactor, variable searchingIntervalFactor ) void;
	function SchedIsSchedule() variable;
	function SchedWaitForTask( variable taskId, variable timeout ) variable;
	function SchedGetRunState() variable;
	function SchedGetTaskIds( variable taskStatus, variable& taskIdArray[] ) variable;
	function SchedGetTaskCancelReason( variable taskId ) variable;
	function SchedValidateTaskResources( variable taskId ) variable;
	function SchedSetTaskDescription( variable taskId, variable description ) variable;
	function SchedSetCurrentActivityDescription( variable description ) variable;
	function SchedGetMethodProperties( variable methodId, variable& isVisible ) variable;
	function SchedGetCancelledActivityViewName( variable taskId ) variable;
	function SchedGetCurrentActivityDuration() variable;
	function SchedSetTaskViewName( variable taskId, variable taskViewName ) variable;
	function SchedGetSchedulerSettings2( variable& logActivityDurations, variable& estimateActivityDurations ) void;
	function SchedSetSchedulerSettings2( variable logActivityDurations, variable estimateActivityDurations ) void;
	function SchedGetEstimatedActivityDuration( variable activityGUID, variable statisticIndex ) variable;
	function SchedResetActivityDurationLog( variable activityGUID, variable& recordsAffected ) variable;
	function SchedGetCurrentActivityPlannedDuration() variable;
	function SchedRescheduleActivities( variable taskId ) void;


	// -----------------------------------------------------------------------------------
	// Debugging
	// -----------------------------------------------------------------------------------

//	#define _DEBUG_SCHEDLIB		1	// specifies the debug version of the Sched library


	// --------------------------------------------------------------------------------------
	// Utilities (own implementation to prevent include if HSLUtilLib)
	// --------------------------------------------------------------------------------------

	namespace SchedLibUtil
	{
		static function IsNumber(			// returns true if the variable value is a number
			variable var) variable;			// i: variable

		static function IsString(			// returns true if the variable value is a string
			variable var) variable;			// i: variable

		static function IsInteger(			// returns true if the variable value is an integer
			variable var) variable;			// i: variable
	}


	// --------------------------------------------------------------------------------------
	// Exception/Error handling
	// --------------------------------------------------------------------------------------

	namespace Error
	{
		// Raises a runtime error. Generates a detailed description by using the passed arguments
		static function RaiseRuntimeError(
			variable  errorId,							// i: integer, the error id
			variable& fileName,							// i: string, file name where the error is occured
			variable& functionName,						// i: string, funciton name where the error is occured
			variable& lineNumber) void;				// i: string, line number where the error is occured


		// Generates a descriptive string includes the file, function and line number.
		// Return: Formatted string
		static function GetLocationDescription(
			variable& fileName,							// i: string, file name 		
			variable& functionName,						// i: string, funciton name
			variable& lineNumber) variable;			// i: string, line number 

	}



	// ======================================================================================
	// Constants
	// ======================================================================================
	namespace Const
	{
		static const variable hxLibraryName("HSLSchedLib");	// library name
		static const variable thisFileExtension(".hs_");		// file extension of this file
		static const variable helpFileExtension(".chm");		// HTML Help file
	}


	// --------------------------------------------------------------------------------------
	// Error Ids
	// --------------------------------------------------------------------------------------

	namespace IDE
	{
		static const variable noError						(0);						// No error.

		static const variable firstCommon				(noError+1);
		static const variable unexpectedError			(firstCommon + 0);	// Unecpected Error
		static const variable invalidParam				(firstCommon + 1);	// A parameter is incorrect
		static const variable lastCommon					(firstCommon + 1);		

		static const variable last							( lastCommon );		// guard
	}


	// --------------------------------------------------------------------------------------
	// String Ids
	// --------------------------------------------------------------------------------------

	namespace IDS
	{
		static const variable first						(IDE::last + 1);			// guard

		// private: common strings
		static const variable firstCommon				(first+0);
		static const variable openingBracket			(firstCommon + 0);		// opening bracket 
		static const variable closingBracket			(firstCommon + 1);		// closing bracket
		static const variable point						(firstCommon + 2);		// point (.)
		static const variable runtimeError				(firstCommon + 3);		// runtime error
		static const variable libraryShowName			(firstCommon + 4);		// the name of the librarymodule
		static const variable lastCommon 				(firstCommon + 4);

		static const variable last							(lastCommon);			// guard
	}


	// --------------------------------------------------------------------------------------
	// Library Initialization 
	// --------------------------------------------------------------------------------------
	static function InitSchedLibrary() variable;		// initializes the Scheduler library (only once)

	static variable m_initializedLib(hslFalse);		// initialization state of the Scheduler library



	// ===================================================================================
	// Implementation
	// ===================================================================================

	// -----------------------------------------------------------------------------------
	// Resource functions
	// -----------------------------------------------------------------------------------

	// wrapper function
	function ResGetMaxCount( resource& resObj ) variable
	{
		InitSchedLibrary();

		return( resObj.GetMaxCount() );
	}


	// wrapper function
	function ResGetEnabledCount( resource& resObj ) variable
	{
		InitSchedLibrary();

		return( resObj.GetEnabledCount() );
	}


	// wrapper function
	function ResGetViewName( resource& resObj ) variable
	{
		InitSchedLibrary();

		return( resObj.GetViewName() );
	}


	// wrapper function
	function ResGetAvailable( resource& resObj ) variable
	{
		InitSchedLibrary();

		return( resObj.GetAvailable() );
	}


	// wrapper function
	function ResDisable( resource& resObj, variable unit, variable cancelTaskOnDemand ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(unit) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(cancelTaskOnDemand) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( resObj.Disable( unit, cancelTaskOnDemand ) );
	}


	// wrapper function
	function ResEnable( resource& resObj, variable unit ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(unit) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( resObj.Enable( unit ) );
	}


	// wrapper function
	function ResEqualsToResource( resource& resObj, resource& res ) variable
	{
		InitSchedLibrary();

		return( resObj.EqualsToResource( res ) );
	}


	// wrapper function
	function ResIsEnabled( resource& resObj, variable unit ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(unit) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( resObj.IsEnabled( unit ) );
	}


	// wrapper function
	function ResDisableAll( resource& resObj, variable cancelTaskOnDemand ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(cancelTaskOnDemand) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( resObj.DisableAll() );
	}


	// wrapper function
	function ResEnableAll( resource& resObj ) variable
	{
		InitSchedLibrary();

		return( resObj.EnableAll() );
	}


	// wrapper function
	function ResSetDistribution( resource& resObj, variable distribution, variable distributionOption ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(distribution) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(distributionOption) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( resObj.SetDistribution( distribution, distributionOption ) );
	}


	// -----------------------------------------------------------------------------------
	// Sequence functions
	// -----------------------------------------------------------------------------------

/*
	// wrapper function
	function SeqGetMaxPositions( sequence& seqObj ) variable
	{
		InitSchedLibrary();

		return( seqObj.GetMaxPositions() );
	}


	// wrapper function
	function SeqGetAvailablePositions( sequence& seqObj ) variable
	{
		InitSchedLibrary();

		return( seqObj.GetAvailablePositions() );
	}


	// wrapper function
	function SeqAcquirePositions( sequence& seqObj, variable count, variable& currentPosition ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(count) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( seqObj.AcquirePositions( count, currentPosition ) );
	}


	// wrapper function
	function SeqReleasePositions( sequence& seqObj, variable positionsHandle ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(positionsHandle) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( seqObj.ReleasePositions( positionsHandle ) );
	}
*/


	// -----------------------------------------------------------------------------------
	// Scheduler functions
	// -----------------------------------------------------------------------------------

	// wrapper function
	function SchedGetCurrentTaskId() variable
	{
		InitSchedLibrary();

		return( GetCurrentTaskId() );
	}


	// wrapper function
	function SchedGetCurrentTaskViewName() variable
	{
		InitSchedLibrary();

		return( GetCurrentTaskViewName() );
	}


	// wrapper function
	function SchedGetTaskViewName( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetTaskViewName( taskId ) );
	}


	// wrapper function
	function SchedGetMethodViewName( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetMethodViewName( taskId ) );
	}


	// wrapper function
	function SchedGetCurrentActivityViewName() variable
	{
		InitSchedLibrary();

		return( GetCurrentActivityViewName() );
	}


	// wrapper function
	function SchedGetWorkflowFileName() variable
	{
		InitSchedLibrary();

		return( GetWorkflowFileName() );
	}


	// wrapper function
	function SchedTaskIsCancelable( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( TaskIsCancelable( taskId ) );
	}


	// wrapper function
	function SchedTaskIsUnschedulable( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( TaskIsUnschedulable( taskId ) );
	}


	// wrapper function
	function SchedUnscheduleTask( variable taskId, variable removeTask ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(removeTask) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( UnscheduleTask( taskId, removeTask ) );
	}


	// wrapper function
	function SchedGetTaskStatus( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetTaskStatus( taskId ) );
	}


	// wrapper function
	function SchedSetMethodProperties( variable methodId, variable isVisible ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(methodId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(isVisible) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( SetMethodProperties( methodId, isVisible ) );
	}


	// wrapper function
	function SchedSetTaskProperties( variable taskId, variable isUnschedulable, variable isCancelable ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(isUnschedulable) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(isCancelable) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( SetTaskProperties( taskId, isUnschedulable, isCancelable ) );
	}


	// wrapper function
	function SchedEnableReschedule()	void
	{
		InitSchedLibrary();

		EnableReschedule();
	}


	// wrapper function
	function SchedDisableReschedule() void
	{
		InitSchedLibrary();

		DisableReschedule();
	}


	// wrapper function
	function SchedRescheduleIsEnabled() variable
	{
		InitSchedLibrary();

		return( RescheduleIsEnabled() );
	}


	// wrapper function
	function SchedGetSchedulerSettings( variable& controlCycleTime, variable& taskPreActivationTime, variable& controlPolicy,
						variable& errorPolicy, variable& branchingMode, variable& maxDisposableTasks, variable& maxOptimizedUnits,
						variable& maxActivityDurationFactor, variable& searchingIntervalFactor ) void
	{
		InitSchedLibrary();

		GetSchedulerSettings( controlCycleTime, taskPreActivationTime, controlPolicy, errorPolicy, branchingMode, maxDisposableTasks,
			maxOptimizedUnits, maxActivityDurationFactor, searchingIntervalFactor );
	}


	// wrapper function
	function SchedSetSchedulerSettings( variable controlCycleTime, variable taskPreActivationTime, variable controlPolicy,
						variable errorPolicy, variable branchingMode, variable maxDisposableTasks, variable maxOptimizedUnits,
						variable maxActivityDurationFactor, variable searchingIntervalFactor ) void
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(controlCycleTime) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(taskPreActivationTime) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(controlPolicy) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(errorPolicy) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(branchingMode) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(maxDisposableTasks) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(maxOptimizedUnits) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsNumber(maxActivityDurationFactor) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsNumber(searchingIntervalFactor) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		SetSchedulerSettings( controlCycleTime, taskPreActivationTime, controlPolicy, errorPolicy, branchingMode, maxDisposableTasks,
			maxOptimizedUnits, maxActivityDurationFactor, searchingIntervalFactor );
	}

	
	function SchedIsSchedule() variable
	{
		InitSchedLibrary();

	#ifdef HSL_SCHEDULE
		return( hslTrue );
	#endif

	#ifndef HSL_SCHEDULE
		return( hslFalse );
	#endif
	}


	function SchedWaitForTask( variable taskId, variable timeout ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(timeout) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if( timeout == -1 )
			timeout = hslInfinite;

		return( Join( taskId, timeout ) );
	}


	// wrapper function
	function SchedGetRunState() variable
	{
		InitSchedLibrary();

		return( GetRunState() );
	}


	// wrapper function
	function SchedGetTaskIds( variable taskStatus, variable& taskIdArray[] ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskStatus) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetTaskIds( taskStatus, taskIdArray ) );
	}


	// wrapper function
	function SchedGetTaskCancelReason( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetTaskCancelReason( taskId ) );
	}


	// wrapper function
	function SchedValidateTaskResources( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( ValidateTaskResources( taskId ) );
	}


	// wrapper function
	function SchedSetTaskDescription( variable taskId, variable description ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsString(description) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( SetTaskDescription( taskId, description ) );
	}


	// wrapper function
	function SchedSetCurrentActivityDescription( variable description ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsString(description) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( SetCurrentActivityDescription( description ) );
	}


	// wrapper function
	function SchedGetMethodProperties( variable methodId, variable& isVisible ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(methodId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetMethodProperties( methodId, isVisible ) );
	}


	// wrapper function
	function SchedGetCancelledActivityViewName( variable taskId ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetCancelledActivityViewName( taskId ) );
	}


	// wrapper function
	function SchedGetCurrentActivityDuration() variable
	{
		InitSchedLibrary();

		return( GetCurrentActivityDuration() );
	}


	// wrapper function
	function SchedSetTaskViewName( variable taskId, variable taskViewName ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsString(taskViewName) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( SetTaskViewName( taskId, taskViewName ) );
	}


	// wrapper function
	function SchedGetSchedulerSettings2( variable& logActivityDurations, variable& estimateActivityDurations ) void
	{
		InitSchedLibrary();

		GetSchedulerSettings2( logActivityDurations, estimateActivityDurations );
	}


	// wrapper function
	function SchedSetSchedulerSettings2( variable logActivityDurations, variable estimateActivityDurations ) void
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(logActivityDurations) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(estimateActivityDurations) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		SetSchedulerSettings2( logActivityDurations, estimateActivityDurations );
	}


	// wrapper function
	function SchedGetEstimatedActivityDuration( variable activityGUID, variable statisticIndex ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsString(activityGUID) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		if ( ! SchedLibUtil::IsInteger(statisticIndex) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( GetEstimatedActivityDuration( activityGUID, statisticIndex ) );
	}


	// wrapper function
	function SchedResetActivityDurationLog( variable activityGUID, variable& recordsAffected ) variable
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsString(activityGUID) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		return( ResetActivityDurationLog( activityGUID, recordsAffected ) );
	}


	// wrapper function
	function SchedGetCurrentActivityPlannedDuration() variable
	{
		InitSchedLibrary();

		return( GetCurrentActivityPlannedDuration() );
	}


	// wrapper function
	function SchedRescheduleActivities( variable taskId ) void
	{
		InitSchedLibrary();

		if ( ! SchedLibUtil::IsInteger(taskId) )
		{
			Error::RaiseRuntimeError(IDE::invalidParam, GetFileName(),
							GetFunctionName(), GetLineNumber());
		}

		reschedule( taskId );
	}


	// --------------------------------------------------------------------------------------
	// Utilities
	// --------------------------------------------------------------------------------------

	static function SchedLibUtil::IsNumber( variable var ) variable
	{
		return(hslString.Compare(GetType(var)) != 0);
	}

	static function SchedLibUtil::IsString( variable var ) variable
	{
		return(hslString.Compare(GetType(var)) == 0);
	}


	static function SchedLibUtil::IsInteger( variable var ) variable
	{
		if ( ! SchedLibUtil::IsNumber(var) )
		{
			return(hslFalse);
		}
		return(hslInteger.Compare(GetType(var)) == 0);
	}



	// --------------------------------------------------------------------------------------
	// Library Initialization 
	// --------------------------------------------------------------------------------------

	static function InitSchedLibrary() variable
	{
		// initialize the Scheduler library once only
		if ( ! m_initializedLib )
		{
			string fileWithPath("");
			string extension(Const::thisFileExtension);
			variable stringTableFileWithoutExtensions("");

			fileWithPath = GetFileName();
			stringTableFileWithoutExtensions = fileWithPath.Left(fileWithPath.GetLength() - extension.GetLength());

			STR::StringTable::Init(stringTableFileWithoutExtensions);

			m_initializedLib = hslTrue;
		}
		return(m_initializedLib);
	}



	// --------------------------------------------------------------------------------------
	// Exception handling
	// --------------------------------------------------------------------------------------

	static function Error::RaiseRuntimeError(
		variable  errorId,
		variable& fileName,
		variable& functionName,
		variable& lineNumber) void
	{
		variable description, helpFileName;

		description = STR::StringTable::Load(IDS::libraryShowName) +
					 	  "\n\n" + 
						  STR::StringTable::Load(IDS::runtimeError) + 
						  STR::StringTable::Load(IDS::point) + 
						  "\n" + Error::GetLocationDescription(fileName, functionName, lineNumber) + "\n\n" +
						  STR::StringTable::Load(errorId);

		helpFileName = Const::hxLibraryName + GetLanguage() + Const::helpFileExtension;

		err.Raise(errorId, description, helpFileName);
	}


	static function Error::GetLocationDescription(
		variable& fileName,
		variable& functionName,
		variable& lineNumber) variable
	{
		variable location;
		location = fileName + "(" + lineNumber + ") : " + functionName + "().";
		return( location );
	}

}


// $$author=wbarmettler$$valid=1$$time=2008-05-05 14:18$$checksum=b2b72ec6$$length=088$$